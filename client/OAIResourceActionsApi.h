/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceActionsApi_H
#define OAI_OAIResourceActionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAIResourceActionCreate.h"
#include "OAIResourceActionRead.h"
#include "OAIResourceActionUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceActionsApi : public QObject {
    Q_OBJECT

public:
    OAIResourceActionsApi(const int timeOut = 0);
    ~OAIResourceActionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  oai_resource_action_create OAIResourceActionCreate [required]
    */
    void createResourceAction(const QString &proj_id, const QString &env_id, const QString &resource_id, const OAIResourceActionCreate &oai_resource_action_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  action_id QString [required]
    */
    void deleteResourceAction(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &action_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  action_id QString [required]
    */
    void getResourceAction(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &action_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listResourceActions(const QString &proj_id, const QString &env_id, const QString &resource_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  action_id QString [required]
    * @param[in]  oai_resource_action_update OAIResourceActionUpdate [required]
    */
    void updateResourceAction(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &action_id, const OAIResourceActionUpdate &oai_resource_action_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createResourceActionCallback(OAIHttpRequestWorker *worker);
    void deleteResourceActionCallback(OAIHttpRequestWorker *worker);
    void getResourceActionCallback(OAIHttpRequestWorker *worker);
    void listResourceActionsCallback(OAIHttpRequestWorker *worker);
    void updateResourceActionCallback(OAIHttpRequestWorker *worker);

signals:

    void createResourceActionSignal(OAIResourceActionRead summary);
    void deleteResourceActionSignal();
    void getResourceActionSignal(OAIResourceActionRead summary);
    void listResourceActionsSignal(QList<OAIResourceActionRead> summary);
    void updateResourceActionSignal(OAIResourceActionRead summary);

    void createResourceActionSignalFull(OAIHttpRequestWorker *worker, OAIResourceActionRead summary);
    void deleteResourceActionSignalFull(OAIHttpRequestWorker *worker);
    void getResourceActionSignalFull(OAIHttpRequestWorker *worker, OAIResourceActionRead summary);
    void listResourceActionsSignalFull(OAIHttpRequestWorker *worker, QList<OAIResourceActionRead> summary);
    void updateResourceActionSignalFull(OAIHttpRequestWorker *worker, OAIResourceActionRead summary);

    void createResourceActionSignalE(OAIResourceActionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourceActionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceActionSignalE(OAIResourceActionRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourceActionsSignalE(QList<OAIResourceActionRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResourceActionSignalE(OAIResourceActionRead summary, QNetworkReply::NetworkError error_type, QString error_str);

    void createResourceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourceActionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResourceActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
