/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRolesApi_H
#define OAI_OAIRolesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddRolePermissions.h"
#include "OAIHTTPValidationError.h"
#include "OAIRemoveRolePermissions.h"
#include "OAIRoleCreate.h"
#include "OAIRoleRead.h"
#include "OAIRoleUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRolesApi : public QObject {
    Q_OBJECT

public:
    OAIRolesApi(const int timeOut = 0);
    ~OAIRolesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  parent_role_id QString [required]
    */
    void addParentRole(const QString &proj_id, const QString &env_id, const QString &role_id, const QString &parent_role_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_add_role_permissions OAIAddRolePermissions [required]
    */
    void assignPermissionsToRole(const QString &proj_id, const QString &env_id, const QString &role_id, const OAIAddRolePermissions &oai_add_role_permissions);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  oai_role_create OAIRoleCreate [required]
    */
    void createRole(const QString &proj_id, const QString &env_id, const OAIRoleCreate &oai_role_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  role_id QString [required]
    */
    void deleteRole(const QString &proj_id, const QString &env_id, const QString &role_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  role_id QString [required]
    */
    void getRole(const QString &proj_id, const QString &env_id, const QString &role_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listRoles(const QString &proj_id, const QString &env_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  parent_role_id QString [required]
    */
    void removeParentRole(const QString &proj_id, const QString &env_id, const QString &role_id, const QString &parent_role_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_remove_role_permissions OAIRemoveRolePermissions [required]
    */
    void removePermissionsFromRole(const QString &proj_id, const QString &env_id, const QString &role_id, const OAIRemoveRolePermissions &oai_remove_role_permissions);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_role_update OAIRoleUpdate [required]
    */
    void updateRole(const QString &proj_id, const QString &env_id, const QString &role_id, const OAIRoleUpdate &oai_role_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addParentRoleCallback(OAIHttpRequestWorker *worker);
    void assignPermissionsToRoleCallback(OAIHttpRequestWorker *worker);
    void createRoleCallback(OAIHttpRequestWorker *worker);
    void deleteRoleCallback(OAIHttpRequestWorker *worker);
    void getRoleCallback(OAIHttpRequestWorker *worker);
    void listRolesCallback(OAIHttpRequestWorker *worker);
    void removeParentRoleCallback(OAIHttpRequestWorker *worker);
    void removePermissionsFromRoleCallback(OAIHttpRequestWorker *worker);
    void updateRoleCallback(OAIHttpRequestWorker *worker);

signals:

    void addParentRoleSignal(OAIRoleRead summary);
    void assignPermissionsToRoleSignal(OAIRoleRead summary);
    void createRoleSignal(OAIRoleRead summary);
    void deleteRoleSignal();
    void getRoleSignal(OAIRoleRead summary);
    void listRolesSignal(QList<OAIRoleRead> summary);
    void removeParentRoleSignal(OAIRoleRead summary);
    void removePermissionsFromRoleSignal(OAIRoleRead summary);
    void updateRoleSignal(OAIRoleRead summary);

    void addParentRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleRead summary);
    void assignPermissionsToRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleRead summary);
    void createRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleRead summary);
    void deleteRoleSignalFull(OAIHttpRequestWorker *worker);
    void getRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleRead summary);
    void listRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIRoleRead> summary);
    void removeParentRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleRead summary);
    void removePermissionsFromRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleRead summary);
    void updateRoleSignalFull(OAIHttpRequestWorker *worker, OAIRoleRead summary);

    void addParentRoleSignalE(OAIRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignPermissionsToRoleSignalE(OAIRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoleSignalE(OAIRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRoleSignalE(OAIRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRolesSignalE(QList<OAIRoleRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeParentRoleSignalE(OAIRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removePermissionsFromRoleSignalE(OAIRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoleSignalE(OAIRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);

    void addParentRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignPermissionsToRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeParentRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePermissionsFromRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
