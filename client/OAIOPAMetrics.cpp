/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOPAMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOPAMetrics::OAIOPAMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOPAMetrics::OAIOPAMetrics() {
    this->initializeModel();
}

OAIOPAMetrics::~OAIOPAMetrics() {}

void OAIOPAMetrics::initializeModel() {

    m_timer_rego_input_parse_ns_isSet = false;
    m_timer_rego_input_parse_ns_isValid = false;

    m_timer_rego_query_parse_ns_isSet = false;
    m_timer_rego_query_parse_ns_isValid = false;

    m_timer_rego_query_compile_ns_isSet = false;
    m_timer_rego_query_compile_ns_isValid = false;

    m_timer_rego_query_eval_ns_isSet = false;
    m_timer_rego_query_eval_ns_isValid = false;

    m_timer_rego_module_parse_ns_isSet = false;
    m_timer_rego_module_parse_ns_isValid = false;

    m_timer_rego_module_compile_ns_isSet = false;
    m_timer_rego_module_compile_ns_isValid = false;

    m_timer_server_handler_ns_isSet = false;
    m_timer_server_handler_ns_isValid = false;
}

void OAIOPAMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOPAMetrics::fromJsonObject(QJsonObject json) {

    m_timer_rego_input_parse_ns_isValid = ::OpenAPI::fromJsonValue(timer_rego_input_parse_ns, json[QString("timer_rego_input_parse_ns")]);
    m_timer_rego_input_parse_ns_isSet = !json[QString("timer_rego_input_parse_ns")].isNull() && m_timer_rego_input_parse_ns_isValid;

    m_timer_rego_query_parse_ns_isValid = ::OpenAPI::fromJsonValue(timer_rego_query_parse_ns, json[QString("timer_rego_query_parse_ns")]);
    m_timer_rego_query_parse_ns_isSet = !json[QString("timer_rego_query_parse_ns")].isNull() && m_timer_rego_query_parse_ns_isValid;

    m_timer_rego_query_compile_ns_isValid = ::OpenAPI::fromJsonValue(timer_rego_query_compile_ns, json[QString("timer_rego_query_compile_ns")]);
    m_timer_rego_query_compile_ns_isSet = !json[QString("timer_rego_query_compile_ns")].isNull() && m_timer_rego_query_compile_ns_isValid;

    m_timer_rego_query_eval_ns_isValid = ::OpenAPI::fromJsonValue(timer_rego_query_eval_ns, json[QString("timer_rego_query_eval_ns")]);
    m_timer_rego_query_eval_ns_isSet = !json[QString("timer_rego_query_eval_ns")].isNull() && m_timer_rego_query_eval_ns_isValid;

    m_timer_rego_module_parse_ns_isValid = ::OpenAPI::fromJsonValue(timer_rego_module_parse_ns, json[QString("timer_rego_module_parse_ns")]);
    m_timer_rego_module_parse_ns_isSet = !json[QString("timer_rego_module_parse_ns")].isNull() && m_timer_rego_module_parse_ns_isValid;

    m_timer_rego_module_compile_ns_isValid = ::OpenAPI::fromJsonValue(timer_rego_module_compile_ns, json[QString("timer_rego_module_compile_ns")]);
    m_timer_rego_module_compile_ns_isSet = !json[QString("timer_rego_module_compile_ns")].isNull() && m_timer_rego_module_compile_ns_isValid;

    m_timer_server_handler_ns_isValid = ::OpenAPI::fromJsonValue(timer_server_handler_ns, json[QString("timer_server_handler_ns")]);
    m_timer_server_handler_ns_isSet = !json[QString("timer_server_handler_ns")].isNull() && m_timer_server_handler_ns_isValid;
}

QString OAIOPAMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOPAMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_timer_rego_input_parse_ns_isSet) {
        obj.insert(QString("timer_rego_input_parse_ns"), ::OpenAPI::toJsonValue(timer_rego_input_parse_ns));
    }
    if (m_timer_rego_query_parse_ns_isSet) {
        obj.insert(QString("timer_rego_query_parse_ns"), ::OpenAPI::toJsonValue(timer_rego_query_parse_ns));
    }
    if (m_timer_rego_query_compile_ns_isSet) {
        obj.insert(QString("timer_rego_query_compile_ns"), ::OpenAPI::toJsonValue(timer_rego_query_compile_ns));
    }
    if (m_timer_rego_query_eval_ns_isSet) {
        obj.insert(QString("timer_rego_query_eval_ns"), ::OpenAPI::toJsonValue(timer_rego_query_eval_ns));
    }
    if (m_timer_rego_module_parse_ns_isSet) {
        obj.insert(QString("timer_rego_module_parse_ns"), ::OpenAPI::toJsonValue(timer_rego_module_parse_ns));
    }
    if (m_timer_rego_module_compile_ns_isSet) {
        obj.insert(QString("timer_rego_module_compile_ns"), ::OpenAPI::toJsonValue(timer_rego_module_compile_ns));
    }
    if (m_timer_server_handler_ns_isSet) {
        obj.insert(QString("timer_server_handler_ns"), ::OpenAPI::toJsonValue(timer_server_handler_ns));
    }
    return obj;
}

qint32 OAIOPAMetrics::getTimerRegoInputParseNs() const {
    return timer_rego_input_parse_ns;
}
void OAIOPAMetrics::setTimerRegoInputParseNs(const qint32 &timer_rego_input_parse_ns) {
    this->timer_rego_input_parse_ns = timer_rego_input_parse_ns;
    this->m_timer_rego_input_parse_ns_isSet = true;
}

bool OAIOPAMetrics::is_timer_rego_input_parse_ns_Set() const{
    return m_timer_rego_input_parse_ns_isSet;
}

bool OAIOPAMetrics::is_timer_rego_input_parse_ns_Valid() const{
    return m_timer_rego_input_parse_ns_isValid;
}

qint32 OAIOPAMetrics::getTimerRegoQueryParseNs() const {
    return timer_rego_query_parse_ns;
}
void OAIOPAMetrics::setTimerRegoQueryParseNs(const qint32 &timer_rego_query_parse_ns) {
    this->timer_rego_query_parse_ns = timer_rego_query_parse_ns;
    this->m_timer_rego_query_parse_ns_isSet = true;
}

bool OAIOPAMetrics::is_timer_rego_query_parse_ns_Set() const{
    return m_timer_rego_query_parse_ns_isSet;
}

bool OAIOPAMetrics::is_timer_rego_query_parse_ns_Valid() const{
    return m_timer_rego_query_parse_ns_isValid;
}

qint32 OAIOPAMetrics::getTimerRegoQueryCompileNs() const {
    return timer_rego_query_compile_ns;
}
void OAIOPAMetrics::setTimerRegoQueryCompileNs(const qint32 &timer_rego_query_compile_ns) {
    this->timer_rego_query_compile_ns = timer_rego_query_compile_ns;
    this->m_timer_rego_query_compile_ns_isSet = true;
}

bool OAIOPAMetrics::is_timer_rego_query_compile_ns_Set() const{
    return m_timer_rego_query_compile_ns_isSet;
}

bool OAIOPAMetrics::is_timer_rego_query_compile_ns_Valid() const{
    return m_timer_rego_query_compile_ns_isValid;
}

qint32 OAIOPAMetrics::getTimerRegoQueryEvalNs() const {
    return timer_rego_query_eval_ns;
}
void OAIOPAMetrics::setTimerRegoQueryEvalNs(const qint32 &timer_rego_query_eval_ns) {
    this->timer_rego_query_eval_ns = timer_rego_query_eval_ns;
    this->m_timer_rego_query_eval_ns_isSet = true;
}

bool OAIOPAMetrics::is_timer_rego_query_eval_ns_Set() const{
    return m_timer_rego_query_eval_ns_isSet;
}

bool OAIOPAMetrics::is_timer_rego_query_eval_ns_Valid() const{
    return m_timer_rego_query_eval_ns_isValid;
}

qint32 OAIOPAMetrics::getTimerRegoModuleParseNs() const {
    return timer_rego_module_parse_ns;
}
void OAIOPAMetrics::setTimerRegoModuleParseNs(const qint32 &timer_rego_module_parse_ns) {
    this->timer_rego_module_parse_ns = timer_rego_module_parse_ns;
    this->m_timer_rego_module_parse_ns_isSet = true;
}

bool OAIOPAMetrics::is_timer_rego_module_parse_ns_Set() const{
    return m_timer_rego_module_parse_ns_isSet;
}

bool OAIOPAMetrics::is_timer_rego_module_parse_ns_Valid() const{
    return m_timer_rego_module_parse_ns_isValid;
}

qint32 OAIOPAMetrics::getTimerRegoModuleCompileNs() const {
    return timer_rego_module_compile_ns;
}
void OAIOPAMetrics::setTimerRegoModuleCompileNs(const qint32 &timer_rego_module_compile_ns) {
    this->timer_rego_module_compile_ns = timer_rego_module_compile_ns;
    this->m_timer_rego_module_compile_ns_isSet = true;
}

bool OAIOPAMetrics::is_timer_rego_module_compile_ns_Set() const{
    return m_timer_rego_module_compile_ns_isSet;
}

bool OAIOPAMetrics::is_timer_rego_module_compile_ns_Valid() const{
    return m_timer_rego_module_compile_ns_isValid;
}

qint32 OAIOPAMetrics::getTimerServerHandlerNs() const {
    return timer_server_handler_ns;
}
void OAIOPAMetrics::setTimerServerHandlerNs(const qint32 &timer_server_handler_ns) {
    this->timer_server_handler_ns = timer_server_handler_ns;
    this->m_timer_server_handler_ns_isSet = true;
}

bool OAIOPAMetrics::is_timer_server_handler_ns_Set() const{
    return m_timer_server_handler_ns_isSet;
}

bool OAIOPAMetrics::is_timer_server_handler_ns_Valid() const{
    return m_timer_server_handler_ns_isValid;
}

bool OAIOPAMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timer_rego_input_parse_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_rego_query_parse_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_rego_query_compile_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_rego_query_eval_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_rego_module_parse_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_rego_module_compile_ns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timer_server_handler_ns_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOPAMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
