/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElementsConfigRead.h
 *
 * 
 */

#ifndef OAIElementsConfigRead_H
#define OAIElementsConfigRead_H

#include <QJsonObject>

#include "OAIElementsType.h"
#include "OAIPermissionLevelRoleRead.h"
#include "OAISettings.h"
#include "OAIWebhookRead.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPermissionLevelRoleRead;
class OAIWebhookRead;

class OAIElementsConfigRead : public OAIObject {
public:
    OAIElementsConfigRead();
    OAIElementsConfigRead(QString json);
    ~OAIElementsConfigRead() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getKey() const;
    void setKey(const QString &key);
    bool is_key_Set() const;
    bool is_key_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getOrganizationId() const;
    void setOrganizationId(const QString &organization_id);
    bool is_organization_id_Set() const;
    bool is_organization_id_Valid() const;

    QString getProjectId() const;
    void setProjectId(const QString &project_id);
    bool is_project_id_Set() const;
    bool is_project_id_Valid() const;

    QString getEnvironmentId() const;
    void setEnvironmentId(const QString &environment_id);
    bool is_environment_id_Set() const;
    bool is_environment_id_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    bool isIsActive() const;
    void setIsActive(const bool &is_active);
    bool is_is_active_Set() const;
    bool is_is_active_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIElementsType getElementsType() const;
    void setElementsType(const OAIElementsType &elements_type);
    bool is_elements_type_Set() const;
    bool is_elements_type_Valid() const;

    QMap<QString, OAISettings> getSettings() const;
    void setSettings(const QMap<QString, OAISettings> &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    QMap<QString, QList<OAIPermissionLevelRoleRead>> getRolesToLevels() const;
    void setRolesToLevels(const QMap<QString, QList<OAIPermissionLevelRoleRead>> &roles_to_levels);
    bool is_roles_to_levels_Set() const;
    bool is_roles_to_levels_Valid() const;

    OAIWebhookRead getWebhook() const;
    void setWebhook(const OAIWebhookRead &webhook);
    bool is_webhook_Set() const;
    bool is_webhook_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString key;
    bool m_key_isSet;
    bool m_key_isValid;

    QString id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString organization_id;
    bool m_organization_id_isSet;
    bool m_organization_id_isValid;

    QString project_id;
    bool m_project_id_isSet;
    bool m_project_id_isValid;

    QString environment_id;
    bool m_environment_id_isSet;
    bool m_environment_id_isValid;

    QDateTime created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    bool is_active;
    bool m_is_active_isSet;
    bool m_is_active_isValid;

    QString name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIElementsType elements_type;
    bool m_elements_type_isSet;
    bool m_elements_type_isValid;

    QMap<QString, OAISettings> settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    QMap<QString, QList<OAIPermissionLevelRoleRead>> roles_to_levels;
    bool m_roles_to_levels_isSet;
    bool m_roles_to_levels_isValid;

    OAIWebhookRead webhook;
    bool m_webhook_isSet;
    bool m_webhook_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElementsConfigRead)

#endif // OAIElementsConfigRead_H
