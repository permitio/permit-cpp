/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguageInstructions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguageInstructions::OAILanguageInstructions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguageInstructions::OAILanguageInstructions() {
    this->initializeModel();
}

OAILanguageInstructions::~OAILanguageInstructions() {}

void OAILanguageInstructions::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;
}

void OAILanguageInstructions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguageInstructions::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;
}

QString OAILanguageInstructions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguageInstructions::asJsonObject() const {
    QJsonObject obj;
    if (language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(language));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(label));
    }
    if (m_instructions_isSet) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(instructions));
    }
    return obj;
}

OAIProgrammingLanguage OAILanguageInstructions::getLanguage() const {
    return language;
}
void OAILanguageInstructions::setLanguage(const OAIProgrammingLanguage &language) {
    this->language = language;
    this->m_language_isSet = true;
}

bool OAILanguageInstructions::is_language_Set() const{
    return m_language_isSet;
}

bool OAILanguageInstructions::is_language_Valid() const{
    return m_language_isValid;
}

QString OAILanguageInstructions::getLabel() const {
    return label;
}
void OAILanguageInstructions::setLabel(const QString &label) {
    this->label = label;
    this->m_label_isSet = true;
}

bool OAILanguageInstructions::is_label_Set() const{
    return m_label_isSet;
}

bool OAILanguageInstructions::is_label_Valid() const{
    return m_label_isValid;
}

QString OAILanguageInstructions::getInstructions() const {
    return instructions;
}
void OAILanguageInstructions::setInstructions(const QString &instructions) {
    this->instructions = instructions;
    this->m_instructions_isSet = true;
}

bool OAILanguageInstructions::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAILanguageInstructions::is_instructions_Valid() const{
    return m_instructions_isValid;
}

bool OAILanguageInstructions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguageInstructions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_language_isValid && m_label_isValid && m_instructions_isValid && true;
}

} // namespace OpenAPI
