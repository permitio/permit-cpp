/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAIPaginatedResult_UserRead_.h"
#include "OAIRoleAssignmentRead.h"
#include "OAIUserCreate.h"
#include "OAIUserRead.h"
#include "OAIUserRoleCreate.h"
#include "OAIUserRoleRemove.h"
#include "OAIUserUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_role_create OAIUserRoleCreate [required]
    */
    void assignRoleToUser(const QString &proj_id, const QString &env_id, const QString &user_id, const OAIUserRoleCreate &oai_user_role_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  oai_user_create OAIUserCreate [required]
    */
    void createUser(const QString &proj_id, const QString &env_id, const OAIUserCreate &oai_user_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  user_id QString [required]
    */
    void deleteUser(const QString &proj_id, const QString &env_id, const QString &user_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  user_id QString [required]
    */
    void getUser(const QString &proj_id, const QString &env_id, const QString &user_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listUsers(const QString &proj_id, const QString &env_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_create OAIUserCreate [required]
    */
    void replaceUser(const QString &proj_id, const QString &env_id, const QString &user_id, const OAIUserCreate &oai_user_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_role_remove OAIUserRoleRemove [required]
    */
    void unassignRoleFromUser(const QString &proj_id, const QString &env_id, const QString &user_id, const OAIUserRoleRemove &oai_user_role_remove);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_user_update OAIUserUpdate [required]
    */
    void updateUser(const QString &proj_id, const QString &env_id, const QString &user_id, const OAIUserUpdate &oai_user_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void assignRoleToUserCallback(OAIHttpRequestWorker *worker);
    void createUserCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void listUsersCallback(OAIHttpRequestWorker *worker);
    void replaceUserCallback(OAIHttpRequestWorker *worker);
    void unassignRoleFromUserCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);

signals:

    void assignRoleToUserSignal(OAIRoleAssignmentRead summary);
    void createUserSignal(OAIUserRead summary);
    void deleteUserSignal();
    void getUserSignal(OAIUserRead summary);
    void listUsersSignal(OAIPaginatedResult_UserRead_ summary);
    void replaceUserSignal(OAIUserRead summary);
    void unassignRoleFromUserSignal(OAIUserRead summary);
    void updateUserSignal(OAIUserRead summary);

    void assignRoleToUserSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentRead summary);
    void createUserSignalFull(OAIHttpRequestWorker *worker, OAIUserRead summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUserRead summary);
    void listUsersSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResult_UserRead_ summary);
    void replaceUserSignalFull(OAIHttpRequestWorker *worker, OAIUserRead summary);
    void unassignRoleFromUserSignalFull(OAIHttpRequestWorker *worker, OAIUserRead summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUserRead summary);

    void assignRoleToUserSignalE(OAIRoleAssignmentRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalE(OAIUserRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalE(OAIUserRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalE(OAIPaginatedResult_UserRead_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceUserSignalE(OAIUserRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unassignRoleFromUserSignalE(OAIUserRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalE(OAIUserRead summary, QNetworkReply::NetworkError error_type, QString error_str);

    void assignRoleToUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unassignRoleFromUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
