/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIKeyRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIKeyRead::OAIAPIKeyRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIKeyRead::OAIAPIKeyRead() {
    this->initializeModel();
}

OAIAPIKeyRead::~OAIAPIKeyRead() {}

void OAIAPIKeyRead::initializeModel() {

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_access_level_isSet = false;
    m_access_level_isValid = false;

    m_owner_type_isSet = false;
    m_owner_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_member_isSet = false;
    m_created_by_member_isValid = false;

    m_last_used_at_isSet = false;
    m_last_used_at_isValid = false;
}

void OAIAPIKeyRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIKeyRead::fromJsonObject(QJsonObject json) {

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(object_type, json[QString("object_type")]);
    m_object_type_isSet = !json[QString("object_type")].isNull() && m_object_type_isValid;

    m_access_level_isValid = ::OpenAPI::fromJsonValue(access_level, json[QString("access_level")]);
    m_access_level_isSet = !json[QString("access_level")].isNull() && m_access_level_isValid;

    m_owner_type_isValid = ::OpenAPI::fromJsonValue(owner_type, json[QString("owner_type")]);
    m_owner_type_isSet = !json[QString("owner_type")].isNull() && m_owner_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_member_isValid = ::OpenAPI::fromJsonValue(created_by_member, json[QString("created_by_member")]);
    m_created_by_member_isSet = !json[QString("created_by_member")].isNull() && m_created_by_member_isValid;

    m_last_used_at_isValid = ::OpenAPI::fromJsonValue(last_used_at, json[QString("last_used_at")]);
    m_last_used_at_isSet = !json[QString("last_used_at")].isNull() && m_last_used_at_isValid;
}

QString OAIAPIKeyRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIKeyRead::asJsonObject() const {
    QJsonObject obj;
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(organization_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(environment_id));
    }
    if (object_type.isSet()) {
        obj.insert(QString("object_type"), ::OpenAPI::toJsonValue(object_type));
    }
    if (access_level.isSet()) {
        obj.insert(QString("access_level"), ::OpenAPI::toJsonValue(access_level));
    }
    if (owner_type.isSet()) {
        obj.insert(QString("owner_type"), ::OpenAPI::toJsonValue(owner_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(secret));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (created_by_member.isSet()) {
        obj.insert(QString("created_by_member"), ::OpenAPI::toJsonValue(created_by_member));
    }
    if (m_last_used_at_isSet) {
        obj.insert(QString("last_used_at"), ::OpenAPI::toJsonValue(last_used_at));
    }
    return obj;
}

QString OAIAPIKeyRead::getOrganizationId() const {
    return organization_id;
}
void OAIAPIKeyRead::setOrganizationId(const QString &organization_id) {
    this->organization_id = organization_id;
    this->m_organization_id_isSet = true;
}

bool OAIAPIKeyRead::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIAPIKeyRead::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIAPIKeyRead::getProjectId() const {
    return project_id;
}
void OAIAPIKeyRead::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIAPIKeyRead::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIAPIKeyRead::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIAPIKeyRead::getEnvironmentId() const {
    return environment_id;
}
void OAIAPIKeyRead::setEnvironmentId(const QString &environment_id) {
    this->environment_id = environment_id;
    this->m_environment_id_isSet = true;
}

bool OAIAPIKeyRead::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIAPIKeyRead::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

OAIMemberAccessObj OAIAPIKeyRead::getObjectType() const {
    return object_type;
}
void OAIAPIKeyRead::setObjectType(const OAIMemberAccessObj &object_type) {
    this->object_type = object_type;
    this->m_object_type_isSet = true;
}

bool OAIAPIKeyRead::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAPIKeyRead::is_object_type_Valid() const{
    return m_object_type_isValid;
}

OAIMemberAccessLevel OAIAPIKeyRead::getAccessLevel() const {
    return access_level;
}
void OAIAPIKeyRead::setAccessLevel(const OAIMemberAccessLevel &access_level) {
    this->access_level = access_level;
    this->m_access_level_isSet = true;
}

bool OAIAPIKeyRead::is_access_level_Set() const{
    return m_access_level_isSet;
}

bool OAIAPIKeyRead::is_access_level_Valid() const{
    return m_access_level_isValid;
}

OAIAPIKeyOwnerType OAIAPIKeyRead::getOwnerType() const {
    return owner_type;
}
void OAIAPIKeyRead::setOwnerType(const OAIAPIKeyOwnerType &owner_type) {
    this->owner_type = owner_type;
    this->m_owner_type_isSet = true;
}

bool OAIAPIKeyRead::is_owner_type_Set() const{
    return m_owner_type_isSet;
}

bool OAIAPIKeyRead::is_owner_type_Valid() const{
    return m_owner_type_isValid;
}

QString OAIAPIKeyRead::getId() const {
    return id;
}
void OAIAPIKeyRead::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAPIKeyRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAPIKeyRead::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAPIKeyRead::getSecret() const {
    return secret;
}
void OAIAPIKeyRead::setSecret(const QString &secret) {
    this->secret = secret;
    this->m_secret_isSet = true;
}

bool OAIAPIKeyRead::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAIAPIKeyRead::is_secret_Valid() const{
    return m_secret_isValid;
}

QDateTime OAIAPIKeyRead::getCreatedAt() const {
    return created_at;
}
void OAIAPIKeyRead::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIAPIKeyRead::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAPIKeyRead::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIOrgMemberRead OAIAPIKeyRead::getCreatedByMember() const {
    return created_by_member;
}
void OAIAPIKeyRead::setCreatedByMember(const OAIOrgMemberRead &created_by_member) {
    this->created_by_member = created_by_member;
    this->m_created_by_member_isSet = true;
}

bool OAIAPIKeyRead::is_created_by_member_Set() const{
    return m_created_by_member_isSet;
}

bool OAIAPIKeyRead::is_created_by_member_Valid() const{
    return m_created_by_member_isValid;
}

QDateTime OAIAPIKeyRead::getLastUsedAt() const {
    return last_used_at;
}
void OAIAPIKeyRead::setLastUsedAt(const QDateTime &last_used_at) {
    this->last_used_at = last_used_at;
    this->m_last_used_at_isSet = true;
}

bool OAIAPIKeyRead::is_last_used_at_Set() const{
    return m_last_used_at_isSet;
}

bool OAIAPIKeyRead::is_last_used_at_Valid() const{
    return m_last_used_at_isValid;
}

bool OAIAPIKeyRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (object_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (access_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (owner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (created_by_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_used_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIKeyRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_id_isValid && m_owner_type_isValid && m_id_isValid && m_created_at_isValid && true;
}

} // namespace OpenAPI
