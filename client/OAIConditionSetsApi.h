/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConditionSetsApi_H
#define OAI_OAIConditionSetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConditionSetCreate.h"
#include "OAIConditionSetRead.h"
#include "OAIConditionSetType.h"
#include "OAIConditionSetUpdate.h"
#include "OAIHTTPValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConditionSetsApi : public QObject {
    Q_OBJECT

public:
    OAIConditionSetsApi(const int timeOut = 0);
    ~OAIConditionSetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  oai_condition_set_create OAIConditionSetCreate [required]
    */
    void createConditionSet(const QString &proj_id, const QString &env_id, const OAIConditionSetCreate &oai_condition_set_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  condition_set_id QString [required]
    */
    void deleteConditionSet(const QString &proj_id, const QString &env_id, const QString &condition_set_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  condition_set_id QString [required]
    */
    void getConditionSet(const QString &proj_id, const QString &env_id, const QString &condition_set_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  type OAIConditionSetType [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listConditionSets(const QString &proj_id, const QString &env_id, const ::OpenAPI::OptionalParam<OAIConditionSetType> &type = ::OpenAPI::OptionalParam<OAIConditionSetType>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  condition_set_id QString [required]
    * @param[in]  oai_condition_set_update OAIConditionSetUpdate [required]
    */
    void updateConditionSet(const QString &proj_id, const QString &env_id, const QString &condition_set_id, const OAIConditionSetUpdate &oai_condition_set_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createConditionSetCallback(OAIHttpRequestWorker *worker);
    void deleteConditionSetCallback(OAIHttpRequestWorker *worker);
    void getConditionSetCallback(OAIHttpRequestWorker *worker);
    void listConditionSetsCallback(OAIHttpRequestWorker *worker);
    void updateConditionSetCallback(OAIHttpRequestWorker *worker);

signals:

    void createConditionSetSignal(OAIConditionSetRead summary);
    void deleteConditionSetSignal();
    void getConditionSetSignal(OAIConditionSetRead summary);
    void listConditionSetsSignal(QList<OAIConditionSetRead> summary);
    void updateConditionSetSignal(OAIConditionSetRead summary);

    void createConditionSetSignalFull(OAIHttpRequestWorker *worker, OAIConditionSetRead summary);
    void deleteConditionSetSignalFull(OAIHttpRequestWorker *worker);
    void getConditionSetSignalFull(OAIHttpRequestWorker *worker, OAIConditionSetRead summary);
    void listConditionSetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIConditionSetRead> summary);
    void updateConditionSetSignalFull(OAIHttpRequestWorker *worker, OAIConditionSetRead summary);

    void createConditionSetSignalE(OAIConditionSetRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConditionSetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getConditionSetSignalE(OAIConditionSetRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listConditionSetsSignalE(QList<OAIConditionSetRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConditionSetSignalE(OAIConditionSetRead summary, QNetworkReply::NetworkError error_type, QString error_str);

    void createConditionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteConditionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConditionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listConditionSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConditionSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
