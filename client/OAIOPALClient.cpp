/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOPALClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOPALClient::OAIOPALClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOPALClient::OAIOPALClient() {
    this->initializeModel();
}

OAIOPALClient::~OAIOPALClient() {}

void OAIOPALClient::initializeModel() {

    m_data_topics_isSet = false;
    m_data_topics_isValid = false;

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_server_url_isSet = false;
    m_server_url_isValid = false;

    m_server_ws_url_isSet = false;
    m_server_ws_url_isValid = false;

    m_server_pubsub_url_isSet = false;
    m_server_pubsub_url_isValid = false;

    m_default_data_sources_config_url_isSet = false;
    m_default_data_sources_config_url_isValid = false;

    m_scope_id_isSet = false;
    m_scope_id_isValid = false;
}

void OAIOPALClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOPALClient::fromJsonObject(QJsonObject json) {

    m_data_topics_isValid = ::OpenAPI::fromJsonValue(data_topics, json[QString("DATA_TOPICS")]);
    m_data_topics_isSet = !json[QString("DATA_TOPICS")].isNull() && m_data_topics_isValid;

    m_client_token_isValid = ::OpenAPI::fromJsonValue(client_token, json[QString("CLIENT_TOKEN")]);
    m_client_token_isSet = !json[QString("CLIENT_TOKEN")].isNull() && m_client_token_isValid;

    m_server_url_isValid = ::OpenAPI::fromJsonValue(server_url, json[QString("SERVER_URL")]);
    m_server_url_isSet = !json[QString("SERVER_URL")].isNull() && m_server_url_isValid;

    m_server_ws_url_isValid = ::OpenAPI::fromJsonValue(server_ws_url, json[QString("SERVER_WS_URL")]);
    m_server_ws_url_isSet = !json[QString("SERVER_WS_URL")].isNull() && m_server_ws_url_isValid;

    m_server_pubsub_url_isValid = ::OpenAPI::fromJsonValue(server_pubsub_url, json[QString("SERVER_PUBSUB_URL")]);
    m_server_pubsub_url_isSet = !json[QString("SERVER_PUBSUB_URL")].isNull() && m_server_pubsub_url_isValid;

    m_default_data_sources_config_url_isValid = ::OpenAPI::fromJsonValue(default_data_sources_config_url, json[QString("DEFAULT_DATA_SOURCES_CONFIG_URL")]);
    m_default_data_sources_config_url_isSet = !json[QString("DEFAULT_DATA_SOURCES_CONFIG_URL")].isNull() && m_default_data_sources_config_url_isValid;

    m_scope_id_isValid = ::OpenAPI::fromJsonValue(scope_id, json[QString("SCOPE_ID")]);
    m_scope_id_isSet = !json[QString("SCOPE_ID")].isNull() && m_scope_id_isValid;
}

QString OAIOPALClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOPALClient::asJsonObject() const {
    QJsonObject obj;
    if (data_topics.size() > 0) {
        obj.insert(QString("DATA_TOPICS"), ::OpenAPI::toJsonValue(data_topics));
    }
    if (m_client_token_isSet) {
        obj.insert(QString("CLIENT_TOKEN"), ::OpenAPI::toJsonValue(client_token));
    }
    if (m_server_url_isSet) {
        obj.insert(QString("SERVER_URL"), ::OpenAPI::toJsonValue(server_url));
    }
    if (m_server_ws_url_isSet) {
        obj.insert(QString("SERVER_WS_URL"), ::OpenAPI::toJsonValue(server_ws_url));
    }
    if (m_server_pubsub_url_isSet) {
        obj.insert(QString("SERVER_PUBSUB_URL"), ::OpenAPI::toJsonValue(server_pubsub_url));
    }
    if (m_default_data_sources_config_url_isSet) {
        obj.insert(QString("DEFAULT_DATA_SOURCES_CONFIG_URL"), ::OpenAPI::toJsonValue(default_data_sources_config_url));
    }
    if (m_scope_id_isSet) {
        obj.insert(QString("SCOPE_ID"), ::OpenAPI::toJsonValue(scope_id));
    }
    return obj;
}

QList<QString> OAIOPALClient::getDataTopics() const {
    return data_topics;
}
void OAIOPALClient::setDataTopics(const QList<QString> &data_topics) {
    this->data_topics = data_topics;
    this->m_data_topics_isSet = true;
}

bool OAIOPALClient::is_data_topics_Set() const{
    return m_data_topics_isSet;
}

bool OAIOPALClient::is_data_topics_Valid() const{
    return m_data_topics_isValid;
}

QString OAIOPALClient::getClientToken() const {
    return client_token;
}
void OAIOPALClient::setClientToken(const QString &client_token) {
    this->client_token = client_token;
    this->m_client_token_isSet = true;
}

bool OAIOPALClient::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIOPALClient::is_client_token_Valid() const{
    return m_client_token_isValid;
}

QString OAIOPALClient::getServerUrl() const {
    return server_url;
}
void OAIOPALClient::setServerUrl(const QString &server_url) {
    this->server_url = server_url;
    this->m_server_url_isSet = true;
}

bool OAIOPALClient::is_server_url_Set() const{
    return m_server_url_isSet;
}

bool OAIOPALClient::is_server_url_Valid() const{
    return m_server_url_isValid;
}

QString OAIOPALClient::getServerWsUrl() const {
    return server_ws_url;
}
void OAIOPALClient::setServerWsUrl(const QString &server_ws_url) {
    this->server_ws_url = server_ws_url;
    this->m_server_ws_url_isSet = true;
}

bool OAIOPALClient::is_server_ws_url_Set() const{
    return m_server_ws_url_isSet;
}

bool OAIOPALClient::is_server_ws_url_Valid() const{
    return m_server_ws_url_isValid;
}

QString OAIOPALClient::getServerPubsubUrl() const {
    return server_pubsub_url;
}
void OAIOPALClient::setServerPubsubUrl(const QString &server_pubsub_url) {
    this->server_pubsub_url = server_pubsub_url;
    this->m_server_pubsub_url_isSet = true;
}

bool OAIOPALClient::is_server_pubsub_url_Set() const{
    return m_server_pubsub_url_isSet;
}

bool OAIOPALClient::is_server_pubsub_url_Valid() const{
    return m_server_pubsub_url_isValid;
}

QString OAIOPALClient::getDefaultDataSourcesConfigUrl() const {
    return default_data_sources_config_url;
}
void OAIOPALClient::setDefaultDataSourcesConfigUrl(const QString &default_data_sources_config_url) {
    this->default_data_sources_config_url = default_data_sources_config_url;
    this->m_default_data_sources_config_url_isSet = true;
}

bool OAIOPALClient::is_default_data_sources_config_url_Set() const{
    return m_default_data_sources_config_url_isSet;
}

bool OAIOPALClient::is_default_data_sources_config_url_Valid() const{
    return m_default_data_sources_config_url_isValid;
}

QString OAIOPALClient::getScopeId() const {
    return scope_id;
}
void OAIOPALClient::setScopeId(const QString &scope_id) {
    this->scope_id = scope_id;
    this->m_scope_id_isSet = true;
}

bool OAIOPALClient::is_scope_id_Set() const{
    return m_scope_id_isSet;
}

bool OAIOPALClient::is_scope_id_Valid() const{
    return m_scope_id_isValid;
}

bool OAIOPALClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (data_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ws_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_pubsub_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_data_sources_config_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOPALClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_topics_isValid && m_client_token_isValid && m_server_url_isValid && m_server_ws_url_isValid && m_server_pubsub_url_isValid && m_default_data_sources_config_url_isValid && true;
}

} // namespace OpenAPI
