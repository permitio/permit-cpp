/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoteConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoteConfig::OAIRemoteConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoteConfig::OAIRemoteConfig() {
    this->initializeModel();
}

OAIRemoteConfig::~OAIRemoteConfig() {}

void OAIRemoteConfig::initializeModel() {

    m_opal_common_isSet = false;
    m_opal_common_isValid = false;

    m_opal_client_isSet = false;
    m_opal_client_isValid = false;

    m_pdp_isSet = false;
    m_pdp_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;
}

void OAIRemoteConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoteConfig::fromJsonObject(QJsonObject json) {

    m_opal_common_isValid = ::OpenAPI::fromJsonValue(opal_common, json[QString("opal_common")]);
    m_opal_common_isSet = !json[QString("opal_common")].isNull() && m_opal_common_isValid;

    m_opal_client_isValid = ::OpenAPI::fromJsonValue(opal_client, json[QString("opal_client")]);
    m_opal_client_isSet = !json[QString("opal_client")].isNull() && m_opal_client_isValid;

    m_pdp_isValid = ::OpenAPI::fromJsonValue(pdp, json[QString("pdp")]);
    m_pdp_isSet = !json[QString("pdp")].isNull() && m_pdp_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;
}

QString OAIRemoteConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoteConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_opal_common_isSet) {
        obj.insert(QString("opal_common"), ::OpenAPI::toJsonValue(opal_common));
    }
    if (opal_client.isSet()) {
        obj.insert(QString("opal_client"), ::OpenAPI::toJsonValue(opal_client));
    }
    if (pdp.isSet()) {
        obj.insert(QString("pdp"), ::OpenAPI::toJsonValue(pdp));
    }
    if (context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(context));
    }
    return obj;
}

OAIObject OAIRemoteConfig::getOpalCommon() const {
    return opal_common;
}
void OAIRemoteConfig::setOpalCommon(const OAIObject &opal_common) {
    this->opal_common = opal_common;
    this->m_opal_common_isSet = true;
}

bool OAIRemoteConfig::is_opal_common_Set() const{
    return m_opal_common_isSet;
}

bool OAIRemoteConfig::is_opal_common_Valid() const{
    return m_opal_common_isValid;
}

OAIOPALClient OAIRemoteConfig::getOpalClient() const {
    return opal_client;
}
void OAIRemoteConfig::setOpalClient(const OAIOPALClient &opal_client) {
    this->opal_client = opal_client;
    this->m_opal_client_isSet = true;
}

bool OAIRemoteConfig::is_opal_client_Set() const{
    return m_opal_client_isSet;
}

bool OAIRemoteConfig::is_opal_client_Valid() const{
    return m_opal_client_isValid;
}

OAIPdp OAIRemoteConfig::getPdp() const {
    return pdp;
}
void OAIRemoteConfig::setPdp(const OAIPdp &pdp) {
    this->pdp = pdp;
    this->m_pdp_isSet = true;
}

bool OAIRemoteConfig::is_pdp_Set() const{
    return m_pdp_isSet;
}

bool OAIRemoteConfig::is_pdp_Valid() const{
    return m_pdp_isValid;
}

OAIPDPContext OAIRemoteConfig::getContext() const {
    return context;
}
void OAIRemoteConfig::setContext(const OAIPDPContext &context) {
    this->context = context;
    this->m_context_isSet = true;
}

bool OAIRemoteConfig::is_context_Set() const{
    return m_context_isSet;
}

bool OAIRemoteConfig::is_context_Valid() const{
    return m_context_isValid;
}

bool OAIRemoteConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_opal_common_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (opal_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (pdp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (context.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoteConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_opal_client_isValid && m_context_isValid && true;
}

} // namespace OpenAPI
