/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserRead::OAIUserRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserRead::OAIUserRead() {
    this->initializeModel();
}

OAIUserRead::~OAIUserRead() {}

void OAIUserRead::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIUserRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserRead::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_attributes_isValid = ::OpenAPI::fromJsonValue(attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;
}

QString OAIUserRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserRead::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(key));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(organization_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(environment_id));
    }
    if (roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(roles));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(last_name));
    }
    if (m_attributes_isSet) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(attributes));
    }
    return obj;
}

QString OAIUserRead::getKey() const {
    return key;
}
void OAIUserRead::setKey(const QString &key) {
    this->key = key;
    this->m_key_isSet = true;
}

bool OAIUserRead::is_key_Set() const{
    return m_key_isSet;
}

bool OAIUserRead::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIUserRead::getId() const {
    return id;
}
void OAIUserRead::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIUserRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserRead::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserRead::getOrganizationId() const {
    return organization_id;
}
void OAIUserRead::setOrganizationId(const QString &organization_id) {
    this->organization_id = organization_id;
    this->m_organization_id_isSet = true;
}

bool OAIUserRead::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIUserRead::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIUserRead::getProjectId() const {
    return project_id;
}
void OAIUserRead::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIUserRead::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIUserRead::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIUserRead::getEnvironmentId() const {
    return environment_id;
}
void OAIUserRead::setEnvironmentId(const QString &environment_id) {
    this->environment_id = environment_id;
    this->m_environment_id_isSet = true;
}

bool OAIUserRead::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIUserRead::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QList<OAIUserRole> OAIUserRead::getRoles() const {
    return roles;
}
void OAIUserRead::setRoles(const QList<OAIUserRole> &roles) {
    this->roles = roles;
    this->m_roles_isSet = true;
}

bool OAIUserRead::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIUserRead::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIUserRead::getEmail() const {
    return email;
}
void OAIUserRead::setEmail(const QString &email) {
    this->email = email;
    this->m_email_isSet = true;
}

bool OAIUserRead::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserRead::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserRead::getFirstName() const {
    return first_name;
}
void OAIUserRead::setFirstName(const QString &first_name) {
    this->first_name = first_name;
    this->m_first_name_isSet = true;
}

bool OAIUserRead::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserRead::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserRead::getLastName() const {
    return last_name;
}
void OAIUserRead::setLastName(const QString &last_name) {
    this->last_name = last_name;
    this->m_last_name_isSet = true;
}

bool OAIUserRead::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserRead::is_last_name_Valid() const{
    return m_last_name_isValid;
}

OAIObject OAIUserRead::getAttributes() const {
    return attributes;
}
void OAIUserRead::setAttributes(const OAIObject &attributes) {
    this->attributes = attributes;
    this->m_attributes_isSet = true;
}

bool OAIUserRead::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIUserRead::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIUserRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_id_isValid && m_organization_id_isValid && m_project_id_isValid && m_environment_id_isValid && true;
}

} // namespace OpenAPI
