/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPolicyGitRepositoriesApi_H
#define OAI_OAIPolicyGitRepositoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAIPolicyRepoCreate.h"
#include "OAIPolicyRepoRead.h"
#include "OAIProjectRead.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPolicyGitRepositoriesApi : public QObject {
    Q_OBJECT

public:
    OAIPolicyGitRepositoriesApi(const int timeOut = 0);
    ~OAIPolicyGitRepositoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  repo_id QString [required]
    */
    void activatePolicyRepo(const QString &proj_id, const QString &repo_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  oai_policy_repo_create OAIPolicyRepoCreate [required]
    */
    void createPolicyRepo(const QString &proj_id, const OAIPolicyRepoCreate &oai_policy_repo_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  repo_id QString [required]
    */
    void deletePolicyRepo(const QString &proj_id, const QString &repo_id);

    /**
    * @param[in]  proj_id QString [required]
    */
    void disableActivePolicyRepo(const QString &proj_id);

    /**
    * @param[in]  proj_id QString [required]
    */
    void getActivePolicyRepo(const QString &proj_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  repo_id QString [required]
    */
    void getPolicyRepo(const QString &proj_id, const QString &repo_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listPolicyRepos(const QString &proj_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activatePolicyRepoCallback(OAIHttpRequestWorker *worker);
    void createPolicyRepoCallback(OAIHttpRequestWorker *worker);
    void deletePolicyRepoCallback(OAIHttpRequestWorker *worker);
    void disableActivePolicyRepoCallback(OAIHttpRequestWorker *worker);
    void getActivePolicyRepoCallback(OAIHttpRequestWorker *worker);
    void getPolicyRepoCallback(OAIHttpRequestWorker *worker);
    void listPolicyReposCallback(OAIHttpRequestWorker *worker);

signals:

    void activatePolicyRepoSignal(OAIProjectRead summary);
    void createPolicyRepoSignal(OAIPolicyRepoRead summary);
    void deletePolicyRepoSignal();
    void disableActivePolicyRepoSignal(OAIProjectRead summary);
    void getActivePolicyRepoSignal(OAIPolicyRepoRead summary);
    void getPolicyRepoSignal(OAIPolicyRepoRead summary);
    void listPolicyReposSignal(QList<OAIPolicyRepoRead> summary);

    void activatePolicyRepoSignalFull(OAIHttpRequestWorker *worker, OAIProjectRead summary);
    void createPolicyRepoSignalFull(OAIHttpRequestWorker *worker, OAIPolicyRepoRead summary);
    void deletePolicyRepoSignalFull(OAIHttpRequestWorker *worker);
    void disableActivePolicyRepoSignalFull(OAIHttpRequestWorker *worker, OAIProjectRead summary);
    void getActivePolicyRepoSignalFull(OAIHttpRequestWorker *worker, OAIPolicyRepoRead summary);
    void getPolicyRepoSignalFull(OAIHttpRequestWorker *worker, OAIPolicyRepoRead summary);
    void listPolicyReposSignalFull(OAIHttpRequestWorker *worker, QList<OAIPolicyRepoRead> summary);

    void activatePolicyRepoSignalE(OAIProjectRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPolicyRepoSignalE(OAIPolicyRepoRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePolicyRepoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableActivePolicyRepoSignalE(OAIProjectRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivePolicyRepoSignalE(OAIPolicyRepoRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPolicyRepoSignalE(OAIPolicyRepoRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPolicyReposSignalE(QList<OAIPolicyRepoRead> summary, QNetworkReply::NetworkError error_type, QString error_str);

    void activatePolicyRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPolicyRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePolicyRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableActivePolicyRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivePolicyRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPolicyRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPolicyReposSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
