/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetailedAuditLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetailedAuditLog::OAIDetailedAuditLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetailedAuditLog::OAIDetailedAuditLog() {
    this->initializeModel();
}

OAIDetailedAuditLog::~OAIDetailedAuditLog() {}

void OAIDetailedAuditLog::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_raw_data_isSet = false;
    m_raw_data_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_action_isSet = false;
    m_action_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_user_key_isSet = false;
    m_user_key_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_decision_isSet = false;
    m_decision_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_pdp_config_id_isSet = false;
    m_pdp_config_id_isValid = false;

    m_env_id_isSet = false;
    m_env_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_objects_isSet = false;
    m_objects_isValid = false;
}

void OAIDetailedAuditLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetailedAuditLog::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_raw_data_isValid = ::OpenAPI::fromJsonValue(raw_data, json[QString("raw_data")]);
    m_raw_data_isSet = !json[QString("raw_data")].isNull() && m_raw_data_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_action_isValid = ::OpenAPI::fromJsonValue(action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_user_key_isValid = ::OpenAPI::fromJsonValue(user_key, json[QString("user_key")]);
    m_user_key_isSet = !json[QString("user_key")].isNull() && m_user_key_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(user_email, json[QString("user_email")]);
    m_user_email_isSet = !json[QString("user_email")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(user_name, json[QString("user_name")]);
    m_user_name_isSet = !json[QString("user_name")].isNull() && m_user_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(resource_type, json[QString("resource_type")]);
    m_resource_type_isSet = !json[QString("resource_type")].isNull() && m_resource_type_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_decision_isValid = ::OpenAPI::fromJsonValue(decision, json[QString("decision")]);
    m_decision_isSet = !json[QString("decision")].isNull() && m_decision_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_pdp_config_id_isValid = ::OpenAPI::fromJsonValue(pdp_config_id, json[QString("pdp_config_id")]);
    m_pdp_config_id_isSet = !json[QString("pdp_config_id")].isNull() && m_pdp_config_id_isValid;

    m_env_id_isValid = ::OpenAPI::fromJsonValue(env_id, json[QString("env_id")]);
    m_env_id_isSet = !json[QString("env_id")].isNull() && m_env_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(org_id, json[QString("org_id")]);
    m_org_id_isSet = !json[QString("org_id")].isNull() && m_org_id_isValid;

    m_objects_isValid = ::OpenAPI::fromJsonValue(objects, json[QString("objects")]);
    m_objects_isSet = !json[QString("objects")].isNull() && m_objects_isValid;
}

QString OAIDetailedAuditLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetailedAuditLog::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (raw_data.isSet()) {
        obj.insert(QString("raw_data"), ::OpenAPI::toJsonValue(raw_data));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(input));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(result));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(context));
    }
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(action));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(timestamp));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(query));
    }
    if (m_user_key_isSet) {
        obj.insert(QString("user_key"), ::OpenAPI::toJsonValue(user_key));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("user_email"), ::OpenAPI::toJsonValue(user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("user_name"), ::OpenAPI::toJsonValue(user_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resource_type"), ::OpenAPI::toJsonValue(resource_type));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(tenant));
    }
    if (m_decision_isSet) {
        obj.insert(QString("decision"), ::OpenAPI::toJsonValue(decision));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(reason));
    }
    if (m_pdp_config_id_isSet) {
        obj.insert(QString("pdp_config_id"), ::OpenAPI::toJsonValue(pdp_config_id));
    }
    if (m_env_id_isSet) {
        obj.insert(QString("env_id"), ::OpenAPI::toJsonValue(env_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("org_id"), ::OpenAPI::toJsonValue(org_id));
    }
    if (objects.isSet()) {
        obj.insert(QString("objects"), ::OpenAPI::toJsonValue(objects));
    }
    return obj;
}

QString OAIDetailedAuditLog::getId() const {
    return id;
}
void OAIDetailedAuditLog::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIDetailedAuditLog::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDetailedAuditLog::is_id_Valid() const{
    return m_id_isValid;
}

OAIRaw_Data OAIDetailedAuditLog::getRawData() const {
    return raw_data;
}
void OAIDetailedAuditLog::setRawData(const OAIRaw_Data &raw_data) {
    this->raw_data = raw_data;
    this->m_raw_data_isSet = true;
}

bool OAIDetailedAuditLog::is_raw_data_Set() const{
    return m_raw_data_isSet;
}

bool OAIDetailedAuditLog::is_raw_data_Valid() const{
    return m_raw_data_isValid;
}

QJsonValue OAIDetailedAuditLog::getInput() const {
    return input;
}
void OAIDetailedAuditLog::setInput(const QJsonValue &input) {
    this->input = input;
    this->m_input_isSet = true;
}

bool OAIDetailedAuditLog::is_input_Set() const{
    return m_input_isSet;
}

bool OAIDetailedAuditLog::is_input_Valid() const{
    return m_input_isValid;
}

QJsonValue OAIDetailedAuditLog::getResult() const {
    return result;
}
void OAIDetailedAuditLog::setResult(const QJsonValue &result) {
    this->result = result;
    this->m_result_isSet = true;
}

bool OAIDetailedAuditLog::is_result_Set() const{
    return m_result_isSet;
}

bool OAIDetailedAuditLog::is_result_Valid() const{
    return m_result_isValid;
}

QJsonValue OAIDetailedAuditLog::getContext() const {
    return context;
}
void OAIDetailedAuditLog::setContext(const QJsonValue &context) {
    this->context = context;
    this->m_context_isSet = true;
}

bool OAIDetailedAuditLog::is_context_Set() const{
    return m_context_isSet;
}

bool OAIDetailedAuditLog::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIDetailedAuditLog::getAction() const {
    return action;
}
void OAIDetailedAuditLog::setAction(const QString &action) {
    this->action = action;
    this->m_action_isSet = true;
}

bool OAIDetailedAuditLog::is_action_Set() const{
    return m_action_isSet;
}

bool OAIDetailedAuditLog::is_action_Valid() const{
    return m_action_isValid;
}

QDateTime OAIDetailedAuditLog::getTimestamp() const {
    return timestamp;
}
void OAIDetailedAuditLog::setTimestamp(const QDateTime &timestamp) {
    this->timestamp = timestamp;
    this->m_timestamp_isSet = true;
}

bool OAIDetailedAuditLog::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIDetailedAuditLog::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIDetailedAuditLog::getQuery() const {
    return query;
}
void OAIDetailedAuditLog::setQuery(const QString &query) {
    this->query = query;
    this->m_query_isSet = true;
}

bool OAIDetailedAuditLog::is_query_Set() const{
    return m_query_isSet;
}

bool OAIDetailedAuditLog::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIDetailedAuditLog::getUserKey() const {
    return user_key;
}
void OAIDetailedAuditLog::setUserKey(const QString &user_key) {
    this->user_key = user_key;
    this->m_user_key_isSet = true;
}

bool OAIDetailedAuditLog::is_user_key_Set() const{
    return m_user_key_isSet;
}

bool OAIDetailedAuditLog::is_user_key_Valid() const{
    return m_user_key_isValid;
}

QString OAIDetailedAuditLog::getUserEmail() const {
    return user_email;
}
void OAIDetailedAuditLog::setUserEmail(const QString &user_email) {
    this->user_email = user_email;
    this->m_user_email_isSet = true;
}

bool OAIDetailedAuditLog::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIDetailedAuditLog::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIDetailedAuditLog::getUserName() const {
    return user_name;
}
void OAIDetailedAuditLog::setUserName(const QString &user_name) {
    this->user_name = user_name;
    this->m_user_name_isSet = true;
}

bool OAIDetailedAuditLog::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIDetailedAuditLog::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIDetailedAuditLog::getResourceType() const {
    return resource_type;
}
void OAIDetailedAuditLog::setResourceType(const QString &resource_type) {
    this->resource_type = resource_type;
    this->m_resource_type_isSet = true;
}

bool OAIDetailedAuditLog::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIDetailedAuditLog::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIDetailedAuditLog::getTenant() const {
    return tenant;
}
void OAIDetailedAuditLog::setTenant(const QString &tenant) {
    this->tenant = tenant;
    this->m_tenant_isSet = true;
}

bool OAIDetailedAuditLog::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIDetailedAuditLog::is_tenant_Valid() const{
    return m_tenant_isValid;
}

bool OAIDetailedAuditLog::isDecision() const {
    return decision;
}
void OAIDetailedAuditLog::setDecision(const bool &decision) {
    this->decision = decision;
    this->m_decision_isSet = true;
}

bool OAIDetailedAuditLog::is_decision_Set() const{
    return m_decision_isSet;
}

bool OAIDetailedAuditLog::is_decision_Valid() const{
    return m_decision_isValid;
}

QString OAIDetailedAuditLog::getReason() const {
    return reason;
}
void OAIDetailedAuditLog::setReason(const QString &reason) {
    this->reason = reason;
    this->m_reason_isSet = true;
}

bool OAIDetailedAuditLog::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIDetailedAuditLog::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIDetailedAuditLog::getPdpConfigId() const {
    return pdp_config_id;
}
void OAIDetailedAuditLog::setPdpConfigId(const QString &pdp_config_id) {
    this->pdp_config_id = pdp_config_id;
    this->m_pdp_config_id_isSet = true;
}

bool OAIDetailedAuditLog::is_pdp_config_id_Set() const{
    return m_pdp_config_id_isSet;
}

bool OAIDetailedAuditLog::is_pdp_config_id_Valid() const{
    return m_pdp_config_id_isValid;
}

QString OAIDetailedAuditLog::getEnvId() const {
    return env_id;
}
void OAIDetailedAuditLog::setEnvId(const QString &env_id) {
    this->env_id = env_id;
    this->m_env_id_isSet = true;
}

bool OAIDetailedAuditLog::is_env_id_Set() const{
    return m_env_id_isSet;
}

bool OAIDetailedAuditLog::is_env_id_Valid() const{
    return m_env_id_isValid;
}

QString OAIDetailedAuditLog::getProjectId() const {
    return project_id;
}
void OAIDetailedAuditLog::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIDetailedAuditLog::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIDetailedAuditLog::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIDetailedAuditLog::getOrgId() const {
    return org_id;
}
void OAIDetailedAuditLog::setOrgId(const QString &org_id) {
    this->org_id = org_id;
    this->m_org_id_isSet = true;
}

bool OAIDetailedAuditLog::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIDetailedAuditLog::is_org_id_Valid() const{
    return m_org_id_isValid;
}

OAIAuditLogObjects OAIDetailedAuditLog::getObjects() const {
    return objects;
}
void OAIDetailedAuditLog::setObjects(const OAIAuditLogObjects &objects) {
    this->objects = objects;
    this->m_objects_isSet = true;
}

bool OAIDetailedAuditLog::is_objects_Set() const{
    return m_objects_isSet;
}

bool OAIDetailedAuditLog::is_objects_Valid() const{
    return m_objects_isValid;
}

bool OAIDetailedAuditLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (raw_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_decision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pdp_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (objects.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetailedAuditLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_raw_data_isValid && m_action_isValid && m_timestamp_isValid && m_query_isValid && m_pdp_config_id_isValid && m_env_id_isValid && m_project_id_isValid && m_org_id_isValid && m_objects_isValid && true;
}

} // namespace OpenAPI
