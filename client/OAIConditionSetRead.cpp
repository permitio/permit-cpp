/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionSetRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionSetRead::OAIConditionSetRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionSetRead::OAIConditionSetRead() {
    this->initializeModel();
}

OAIConditionSetRead::~OAIConditionSetRead() {}

void OAIConditionSetRead::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_autogenerated_isSet = false;
    m_autogenerated_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_conditions_isSet = false;
    m_conditions_isValid = false;
}

void OAIConditionSetRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionSetRead::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_autogenerated_isValid = ::OpenAPI::fromJsonValue(autogenerated, json[QString("autogenerated")]);
    m_autogenerated_isSet = !json[QString("autogenerated")].isNull() && m_autogenerated_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_conditions_isValid = ::OpenAPI::fromJsonValue(conditions, json[QString("conditions")]);
    m_conditions_isSet = !json[QString("conditions")].isNull() && m_conditions_isValid;
}

QString OAIConditionSetRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionSetRead::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(key));
    }
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_autogenerated_isSet) {
        obj.insert(QString("autogenerated"), ::OpenAPI::toJsonValue(autogenerated));
    }
    if (resource_id.isSet()) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(resource_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(organization_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(environment_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(resource));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (m_conditions_isSet) {
        obj.insert(QString("conditions"), ::OpenAPI::toJsonValue(conditions));
    }
    return obj;
}

QString OAIConditionSetRead::getKey() const {
    return key;
}
void OAIConditionSetRead::setKey(const QString &key) {
    this->key = key;
    this->m_key_isSet = true;
}

bool OAIConditionSetRead::is_key_Set() const{
    return m_key_isSet;
}

bool OAIConditionSetRead::is_key_Valid() const{
    return m_key_isValid;
}

OAIConditionSetType OAIConditionSetRead::getType() const {
    return type;
}
void OAIConditionSetRead::setType(const OAIConditionSetType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIConditionSetRead::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConditionSetRead::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConditionSetRead::isAutogenerated() const {
    return autogenerated;
}
void OAIConditionSetRead::setAutogenerated(const bool &autogenerated) {
    this->autogenerated = autogenerated;
    this->m_autogenerated_isSet = true;
}

bool OAIConditionSetRead::is_autogenerated_Set() const{
    return m_autogenerated_isSet;
}

bool OAIConditionSetRead::is_autogenerated_Valid() const{
    return m_autogenerated_isValid;
}

OAIResource_Id OAIConditionSetRead::getResourceId() const {
    return resource_id;
}
void OAIConditionSetRead::setResourceId(const OAIResource_Id &resource_id) {
    this->resource_id = resource_id;
    this->m_resource_id_isSet = true;
}

bool OAIConditionSetRead::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIConditionSetRead::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIConditionSetRead::getId() const {
    return id;
}
void OAIConditionSetRead::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIConditionSetRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIConditionSetRead::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIConditionSetRead::getOrganizationId() const {
    return organization_id;
}
void OAIConditionSetRead::setOrganizationId(const QString &organization_id) {
    this->organization_id = organization_id;
    this->m_organization_id_isSet = true;
}

bool OAIConditionSetRead::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIConditionSetRead::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIConditionSetRead::getProjectId() const {
    return project_id;
}
void OAIConditionSetRead::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIConditionSetRead::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIConditionSetRead::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIConditionSetRead::getEnvironmentId() const {
    return environment_id;
}
void OAIConditionSetRead::setEnvironmentId(const QString &environment_id) {
    this->environment_id = environment_id;
    this->m_environment_id_isSet = true;
}

bool OAIConditionSetRead::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIConditionSetRead::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAIConditionSetRead::getCreatedAt() const {
    return created_at;
}
void OAIConditionSetRead::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIConditionSetRead::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIConditionSetRead::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIConditionSetRead::getUpdatedAt() const {
    return updated_at;
}
void OAIConditionSetRead::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool OAIConditionSetRead::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIConditionSetRead::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIResourceRead OAIConditionSetRead::getResource() const {
    return resource;
}
void OAIConditionSetRead::setResource(const OAIResourceRead &resource) {
    this->resource = resource;
    this->m_resource_isSet = true;
}

bool OAIConditionSetRead::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIConditionSetRead::is_resource_Valid() const{
    return m_resource_isValid;
}

QString OAIConditionSetRead::getName() const {
    return name;
}
void OAIConditionSetRead::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIConditionSetRead::is_name_Set() const{
    return m_name_isSet;
}

bool OAIConditionSetRead::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIConditionSetRead::getDescription() const {
    return description;
}
void OAIConditionSetRead::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIConditionSetRead::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConditionSetRead::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIConditionSetRead::getConditions() const {
    return conditions;
}
void OAIConditionSetRead::setConditions(const OAIObject &conditions) {
    this->conditions = conditions;
    this->m_conditions_isSet = true;
}

bool OAIConditionSetRead::is_conditions_Set() const{
    return m_conditions_isSet;
}

bool OAIConditionSetRead::is_conditions_Valid() const{
    return m_conditions_isValid;
}

bool OAIConditionSetRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_autogenerated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (resource_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionSetRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_id_isValid && m_organization_id_isValid && m_project_id_isValid && m_environment_id_isValid && m_created_at_isValid && m_updated_at_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
