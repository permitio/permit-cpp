/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthnMeAPIKeyRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthnMeAPIKeyRead::OAIAuthnMeAPIKeyRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthnMeAPIKeyRead::OAIAuthnMeAPIKeyRead() {
    this->initializeModel();
}

OAIAuthnMeAPIKeyRead::~OAIAuthnMeAPIKeyRead() {}

void OAIAuthnMeAPIKeyRead::initializeModel() {

    m_actor_type_isSet = false;
    m_actor_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_owner_type_isSet = false;
    m_owner_type_isValid = false;

    m_org_id_isSet = false;
    m_org_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_env_id_isSet = false;
    m_env_id_isValid = false;
}

void OAIAuthnMeAPIKeyRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthnMeAPIKeyRead::fromJsonObject(QJsonObject json) {

    m_actor_type_isValid = ::OpenAPI::fromJsonValue(actor_type, json[QString("actor_type")]);
    m_actor_type_isSet = !json[QString("actor_type")].isNull() && m_actor_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(object_type, json[QString("object_type")]);
    m_object_type_isSet = !json[QString("object_type")].isNull() && m_object_type_isValid;

    m_owner_type_isValid = ::OpenAPI::fromJsonValue(owner_type, json[QString("owner_type")]);
    m_owner_type_isSet = !json[QString("owner_type")].isNull() && m_owner_type_isValid;

    m_org_id_isValid = ::OpenAPI::fromJsonValue(org_id, json[QString("org_id")]);
    m_org_id_isSet = !json[QString("org_id")].isNull() && m_org_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_env_id_isValid = ::OpenAPI::fromJsonValue(env_id, json[QString("env_id")]);
    m_env_id_isSet = !json[QString("env_id")].isNull() && m_env_id_isValid;
}

QString OAIAuthnMeAPIKeyRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthnMeAPIKeyRead::asJsonObject() const {
    QJsonObject obj;
    if (m_actor_type_isSet) {
        obj.insert(QString("actor_type"), ::OpenAPI::toJsonValue(actor_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (object_type.isSet()) {
        obj.insert(QString("object_type"), ::OpenAPI::toJsonValue(object_type));
    }
    if (owner_type.isSet()) {
        obj.insert(QString("owner_type"), ::OpenAPI::toJsonValue(owner_type));
    }
    if (m_org_id_isSet) {
        obj.insert(QString("org_id"), ::OpenAPI::toJsonValue(org_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_env_id_isSet) {
        obj.insert(QString("env_id"), ::OpenAPI::toJsonValue(env_id));
    }
    return obj;
}

QString OAIAuthnMeAPIKeyRead::getActorType() const {
    return actor_type;
}
void OAIAuthnMeAPIKeyRead::setActorType(const QString &actor_type) {
    this->actor_type = actor_type;
    this->m_actor_type_isSet = true;
}

bool OAIAuthnMeAPIKeyRead::is_actor_type_Set() const{
    return m_actor_type_isSet;
}

bool OAIAuthnMeAPIKeyRead::is_actor_type_Valid() const{
    return m_actor_type_isValid;
}

QString OAIAuthnMeAPIKeyRead::getId() const {
    return id;
}
void OAIAuthnMeAPIKeyRead::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIAuthnMeAPIKeyRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuthnMeAPIKeyRead::is_id_Valid() const{
    return m_id_isValid;
}

OAIMemberAccessObj OAIAuthnMeAPIKeyRead::getObjectType() const {
    return object_type;
}
void OAIAuthnMeAPIKeyRead::setObjectType(const OAIMemberAccessObj &object_type) {
    this->object_type = object_type;
    this->m_object_type_isSet = true;
}

bool OAIAuthnMeAPIKeyRead::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAuthnMeAPIKeyRead::is_object_type_Valid() const{
    return m_object_type_isValid;
}

OAIAPIKeyOwnerType OAIAuthnMeAPIKeyRead::getOwnerType() const {
    return owner_type;
}
void OAIAuthnMeAPIKeyRead::setOwnerType(const OAIAPIKeyOwnerType &owner_type) {
    this->owner_type = owner_type;
    this->m_owner_type_isSet = true;
}

bool OAIAuthnMeAPIKeyRead::is_owner_type_Set() const{
    return m_owner_type_isSet;
}

bool OAIAuthnMeAPIKeyRead::is_owner_type_Valid() const{
    return m_owner_type_isValid;
}

QString OAIAuthnMeAPIKeyRead::getOrgId() const {
    return org_id;
}
void OAIAuthnMeAPIKeyRead::setOrgId(const QString &org_id) {
    this->org_id = org_id;
    this->m_org_id_isSet = true;
}

bool OAIAuthnMeAPIKeyRead::is_org_id_Set() const{
    return m_org_id_isSet;
}

bool OAIAuthnMeAPIKeyRead::is_org_id_Valid() const{
    return m_org_id_isValid;
}

QString OAIAuthnMeAPIKeyRead::getProjectId() const {
    return project_id;
}
void OAIAuthnMeAPIKeyRead::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIAuthnMeAPIKeyRead::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIAuthnMeAPIKeyRead::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIAuthnMeAPIKeyRead::getEnvId() const {
    return env_id;
}
void OAIAuthnMeAPIKeyRead::setEnvId(const QString &env_id) {
    this->env_id = env_id;
    this->m_env_id_isSet = true;
}

bool OAIAuthnMeAPIKeyRead::is_env_id_Set() const{
    return m_env_id_isSet;
}

bool OAIAuthnMeAPIKeyRead::is_env_id_Valid() const{
    return m_env_id_isValid;
}

bool OAIAuthnMeAPIKeyRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (object_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (owner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthnMeAPIKeyRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_object_type_isValid && m_owner_type_isValid && m_org_id_isValid && true;
}

} // namespace OpenAPI
