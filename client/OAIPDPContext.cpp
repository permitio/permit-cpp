/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPDPContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPDPContext::OAIPDPContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPDPContext::OAIPDPContext() {
    this->initializeModel();
}

OAIPDPContext::~OAIPDPContext() {}

void OAIPDPContext::initializeModel() {

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_backend_tier_isSet = false;
    m_backend_tier_isValid = false;

    m_component_isSet = false;
    m_component_isValid = false;
}

void OAIPDPContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPDPContext::fromJsonObject(QJsonObject json) {

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_backend_tier_isValid = ::OpenAPI::fromJsonValue(backend_tier, json[QString("backend_tier")]);
    m_backend_tier_isSet = !json[QString("backend_tier")].isNull() && m_backend_tier_isValid;

    m_component_isValid = ::OpenAPI::fromJsonValue(component, json[QString("component")]);
    m_component_isSet = !json[QString("component")].isNull() && m_component_isValid;
}

QString OAIPDPContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPDPContext::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(customer_id));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(client_id));
    }
    if (m_backend_tier_isSet) {
        obj.insert(QString("backend_tier"), ::OpenAPI::toJsonValue(backend_tier));
    }
    if (m_component_isSet) {
        obj.insert(QString("component"), ::OpenAPI::toJsonValue(component));
    }
    return obj;
}

QString OAIPDPContext::getCustomerId() const {
    return customer_id;
}
void OAIPDPContext::setCustomerId(const QString &customer_id) {
    this->customer_id = customer_id;
    this->m_customer_id_isSet = true;
}

bool OAIPDPContext::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIPDPContext::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIPDPContext::getClientId() const {
    return client_id;
}
void OAIPDPContext::setClientId(const QString &client_id) {
    this->client_id = client_id;
    this->m_client_id_isSet = true;
}

bool OAIPDPContext::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIPDPContext::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIPDPContext::getBackendTier() const {
    return backend_tier;
}
void OAIPDPContext::setBackendTier(const QString &backend_tier) {
    this->backend_tier = backend_tier;
    this->m_backend_tier_isSet = true;
}

bool OAIPDPContext::is_backend_tier_Set() const{
    return m_backend_tier_isSet;
}

bool OAIPDPContext::is_backend_tier_Valid() const{
    return m_backend_tier_isValid;
}

QString OAIPDPContext::getComponent() const {
    return component;
}
void OAIPDPContext::setComponent(const QString &component) {
    this->component = component;
    this->m_component_isSet = true;
}

bool OAIPDPContext::is_component_Set() const{
    return m_component_isSet;
}

bool OAIPDPContext::is_component_Valid() const{
    return m_component_isValid;
}

bool OAIPDPContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_component_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPDPContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_id_isValid && m_client_id_isValid && m_backend_tier_isValid && true;
}

} // namespace OpenAPI
