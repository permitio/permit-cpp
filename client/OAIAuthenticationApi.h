/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationApi_H
#define OAI_OAIAuthenticationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthnMeRead.h"
#include "OAIDevLogin.h"
#include "OAIEmbeddedLoginRequestOutput.h"
#include "OAIHTTPValidationError.h"
#include "OAILoginResult.h"
#include "OAIUserLoginRequestInput.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationApi(const int timeOut = 0);
    ~OAIAuthenticationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_dev_login OAIDevLogin [required]
    */
    void devLogin(const OAIDevLogin &oai_dev_login);

    /**
    * @param[in]  oai_user_login_request_input OAIUserLoginRequestInput [required]
    */
    void elementsLoginAs(const OAIUserLoginRequestInput &oai_user_login_request_input);

    /**
    * @param[in]  invite_code QString [optional]
    */
    void login(const ::OpenAPI::OptionalParam<QString> &invite_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  token QString [required]
    */
    void loginElements(const QString &token);


    void logoutGet();


    void logoutPost();


    void me();

    /**
    * @param[in]  org_id QString [required]
    */
    void switchOrganization(const QString &org_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void devLoginCallback(OAIHttpRequestWorker *worker);
    void elementsLoginAsCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void loginElementsCallback(OAIHttpRequestWorker *worker);
    void logoutGetCallback(OAIHttpRequestWorker *worker);
    void logoutPostCallback(OAIHttpRequestWorker *worker);
    void meCallback(OAIHttpRequestWorker *worker);
    void switchOrganizationCallback(OAIHttpRequestWorker *worker);

signals:

    void devLoginSignal();
    void elementsLoginAsSignal(OAIEmbeddedLoginRequestOutput summary);
    void loginSignal(OAILoginResult summary);
    void loginElementsSignal(OAILoginResult summary);
    void logoutGetSignal();
    void logoutPostSignal();
    void meSignal(OAIAuthnMeRead summary);
    void switchOrganizationSignal(OAILoginResult summary);

    void devLoginSignalFull(OAIHttpRequestWorker *worker);
    void elementsLoginAsSignalFull(OAIHttpRequestWorker *worker, OAIEmbeddedLoginRequestOutput summary);
    void loginSignalFull(OAIHttpRequestWorker *worker, OAILoginResult summary);
    void loginElementsSignalFull(OAIHttpRequestWorker *worker, OAILoginResult summary);
    void logoutGetSignalFull(OAIHttpRequestWorker *worker);
    void logoutPostSignalFull(OAIHttpRequestWorker *worker);
    void meSignalFull(OAIHttpRequestWorker *worker, OAIAuthnMeRead summary);
    void switchOrganizationSignalFull(OAIHttpRequestWorker *worker, OAILoginResult summary);

    void devLoginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementsLoginAsSignalE(OAIEmbeddedLoginRequestOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalE(OAILoginResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginElementsSignalE(OAILoginResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logoutPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void meSignalE(OAIAuthnMeRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void switchOrganizationSignalE(OAILoginResult summary, QNetworkReply::NetworkError error_type, QString error_str);

    void devLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsLoginAsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginElementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void switchOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
