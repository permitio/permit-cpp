/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIKeyCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIKeyCreate::OAIAPIKeyCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIKeyCreate::OAIAPIKeyCreate() {
    this->initializeModel();
}

OAIAPIKeyCreate::~OAIAPIKeyCreate() {}

void OAIAPIKeyCreate::initializeModel() {

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_access_level_isSet = false;
    m_access_level_isValid = false;

    m_owner_type_isSet = false;
    m_owner_type_isValid = false;
}

void OAIAPIKeyCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIKeyCreate::fromJsonObject(QJsonObject json) {

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(object_type, json[QString("object_type")]);
    m_object_type_isSet = !json[QString("object_type")].isNull() && m_object_type_isValid;

    m_access_level_isValid = ::OpenAPI::fromJsonValue(access_level, json[QString("access_level")]);
    m_access_level_isSet = !json[QString("access_level")].isNull() && m_access_level_isValid;

    m_owner_type_isValid = ::OpenAPI::fromJsonValue(owner_type, json[QString("owner_type")]);
    m_owner_type_isSet = !json[QString("owner_type")].isNull() && m_owner_type_isValid;
}

QString OAIAPIKeyCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIKeyCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(organization_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(environment_id));
    }
    if (object_type.isSet()) {
        obj.insert(QString("object_type"), ::OpenAPI::toJsonValue(object_type));
    }
    if (access_level.isSet()) {
        obj.insert(QString("access_level"), ::OpenAPI::toJsonValue(access_level));
    }
    if (owner_type.isSet()) {
        obj.insert(QString("owner_type"), ::OpenAPI::toJsonValue(owner_type));
    }
    return obj;
}

QString OAIAPIKeyCreate::getOrganizationId() const {
    return organization_id;
}
void OAIAPIKeyCreate::setOrganizationId(const QString &organization_id) {
    this->organization_id = organization_id;
    this->m_organization_id_isSet = true;
}

bool OAIAPIKeyCreate::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIAPIKeyCreate::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIAPIKeyCreate::getProjectId() const {
    return project_id;
}
void OAIAPIKeyCreate::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIAPIKeyCreate::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIAPIKeyCreate::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIAPIKeyCreate::getEnvironmentId() const {
    return environment_id;
}
void OAIAPIKeyCreate::setEnvironmentId(const QString &environment_id) {
    this->environment_id = environment_id;
    this->m_environment_id_isSet = true;
}

bool OAIAPIKeyCreate::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIAPIKeyCreate::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

OAIMemberAccessObj OAIAPIKeyCreate::getObjectType() const {
    return object_type;
}
void OAIAPIKeyCreate::setObjectType(const OAIMemberAccessObj &object_type) {
    this->object_type = object_type;
    this->m_object_type_isSet = true;
}

bool OAIAPIKeyCreate::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAPIKeyCreate::is_object_type_Valid() const{
    return m_object_type_isValid;
}

OAIMemberAccessLevel OAIAPIKeyCreate::getAccessLevel() const {
    return access_level;
}
void OAIAPIKeyCreate::setAccessLevel(const OAIMemberAccessLevel &access_level) {
    this->access_level = access_level;
    this->m_access_level_isSet = true;
}

bool OAIAPIKeyCreate::is_access_level_Set() const{
    return m_access_level_isSet;
}

bool OAIAPIKeyCreate::is_access_level_Valid() const{
    return m_access_level_isValid;
}

OAIAPIKeyOwnerType OAIAPIKeyCreate::getOwnerType() const {
    return owner_type;
}
void OAIAPIKeyCreate::setOwnerType(const OAIAPIKeyOwnerType &owner_type) {
    this->owner_type = owner_type;
    this->m_owner_type_isSet = true;
}

bool OAIAPIKeyCreate::is_owner_type_Set() const{
    return m_owner_type_isSet;
}

bool OAIAPIKeyCreate::is_owner_type_Valid() const{
    return m_owner_type_isValid;
}

bool OAIAPIKeyCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (object_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (access_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (owner_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIKeyCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organization_id_isValid && true;
}

} // namespace OpenAPI
