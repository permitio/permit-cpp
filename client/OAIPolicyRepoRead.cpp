/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyRepoRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyRepoRead::OAIPolicyRepoRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyRepoRead::OAIPolicyRepoRead() {
    this->initializeModel();
}

OAIPolicyRepoRead::~OAIPolicyRepoRead() {}

void OAIPolicyRepoRead::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_main_branch_name_isSet = false;
    m_main_branch_name_isValid = false;

    m_credentials_isSet = false;
    m_credentials_isValid = false;

    m_activate_when_validated_isSet = false;
    m_activate_when_validated_isValid = false;
}

void OAIPolicyRepoRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyRepoRead::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_main_branch_name_isValid = ::OpenAPI::fromJsonValue(main_branch_name, json[QString("main_branch_name")]);
    m_main_branch_name_isSet = !json[QString("main_branch_name")].isNull() && m_main_branch_name_isValid;

    m_credentials_isValid = ::OpenAPI::fromJsonValue(credentials, json[QString("credentials")]);
    m_credentials_isSet = !json[QString("credentials")].isNull() && m_credentials_isValid;

    m_activate_when_validated_isValid = ::OpenAPI::fromJsonValue(activate_when_validated, json[QString("activate_when_validated")]);
    m_activate_when_validated_isSet = !json[QString("activate_when_validated")].isNull() && m_activate_when_validated_isValid;
}

QString OAIPolicyRepoRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyRepoRead::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(status));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(key));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(url));
    }
    if (m_main_branch_name_isSet) {
        obj.insert(QString("main_branch_name"), ::OpenAPI::toJsonValue(main_branch_name));
    }
    if (credentials.isSet()) {
        obj.insert(QString("credentials"), ::OpenAPI::toJsonValue(credentials));
    }
    if (m_activate_when_validated_isSet) {
        obj.insert(QString("activate_when_validated"), ::OpenAPI::toJsonValue(activate_when_validated));
    }
    return obj;
}

QString OAIPolicyRepoRead::getId() const {
    return id;
}
void OAIPolicyRepoRead::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIPolicyRepoRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPolicyRepoRead::is_id_Valid() const{
    return m_id_isValid;
}

OAIPolicyRepoStatus OAIPolicyRepoRead::getStatus() const {
    return status;
}
void OAIPolicyRepoRead::setStatus(const OAIPolicyRepoStatus &status) {
    this->status = status;
    this->m_status_isSet = true;
}

bool OAIPolicyRepoRead::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPolicyRepoRead::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPolicyRepoRead::getKey() const {
    return key;
}
void OAIPolicyRepoRead::setKey(const QString &key) {
    this->key = key;
    this->m_key_isSet = true;
}

bool OAIPolicyRepoRead::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPolicyRepoRead::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPolicyRepoRead::getUrl() const {
    return url;
}
void OAIPolicyRepoRead::setUrl(const QString &url) {
    this->url = url;
    this->m_url_isSet = true;
}

bool OAIPolicyRepoRead::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPolicyRepoRead::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIPolicyRepoRead::getMainBranchName() const {
    return main_branch_name;
}
void OAIPolicyRepoRead::setMainBranchName(const QString &main_branch_name) {
    this->main_branch_name = main_branch_name;
    this->m_main_branch_name_isSet = true;
}

bool OAIPolicyRepoRead::is_main_branch_name_Set() const{
    return m_main_branch_name_isSet;
}

bool OAIPolicyRepoRead::is_main_branch_name_Valid() const{
    return m_main_branch_name_isValid;
}

OAISSHAuthData OAIPolicyRepoRead::getCredentials() const {
    return credentials;
}
void OAIPolicyRepoRead::setCredentials(const OAISSHAuthData &credentials) {
    this->credentials = credentials;
    this->m_credentials_isSet = true;
}

bool OAIPolicyRepoRead::is_credentials_Set() const{
    return m_credentials_isSet;
}

bool OAIPolicyRepoRead::is_credentials_Valid() const{
    return m_credentials_isValid;
}

bool OAIPolicyRepoRead::isActivateWhenValidated() const {
    return activate_when_validated;
}
void OAIPolicyRepoRead::setActivateWhenValidated(const bool &activate_when_validated) {
    this->activate_when_validated = activate_when_validated;
    this->m_activate_when_validated_isSet = true;
}

bool OAIPolicyRepoRead::is_activate_when_validated_Set() const{
    return m_activate_when_validated_isSet;
}

bool OAIPolicyRepoRead::is_activate_when_validated_Valid() const{
    return m_activate_when_validated_isValid;
}

bool OAIPolicyRepoRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_branch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activate_when_validated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyRepoRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_status_isValid && m_key_isValid && m_url_isValid && m_credentials_isValid && true;
}

} // namespace OpenAPI
