/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourcesApi_H
#define OAI_OAIResourcesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAIResourceCreate.h"
#include "OAIResourceRead.h"
#include "OAIResourceReplace.h"
#include "OAIResourceUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourcesApi : public QObject {
    Q_OBJECT

public:
    OAIResourcesApi(const int timeOut = 0);
    ~OAIResourcesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  oai_resource_create OAIResourceCreate [required]
    */
    void createResource(const QString &proj_id, const QString &env_id, const OAIResourceCreate &oai_resource_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    */
    void deleteResource(const QString &proj_id, const QString &env_id, const QString &resource_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    */
    void getResource(const QString &proj_id, const QString &env_id, const QString &resource_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  include_built_in bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listResources(const QString &proj_id, const QString &env_id, const ::OpenAPI::OptionalParam<bool> &include_built_in = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  oai_resource_replace OAIResourceReplace [required]
    */
    void replaceResource(const QString &proj_id, const QString &env_id, const QString &resource_id, const OAIResourceReplace &oai_resource_replace);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  oai_resource_update OAIResourceUpdate [required]
    */
    void updateResource(const QString &proj_id, const QString &env_id, const QString &resource_id, const OAIResourceUpdate &oai_resource_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createResourceCallback(OAIHttpRequestWorker *worker);
    void deleteResourceCallback(OAIHttpRequestWorker *worker);
    void getResourceCallback(OAIHttpRequestWorker *worker);
    void listResourcesCallback(OAIHttpRequestWorker *worker);
    void replaceResourceCallback(OAIHttpRequestWorker *worker);
    void updateResourceCallback(OAIHttpRequestWorker *worker);

signals:

    void createResourceSignal(OAIResourceRead summary);
    void deleteResourceSignal();
    void getResourceSignal(OAIResourceRead summary);
    void listResourcesSignal(QList<OAIResourceRead> summary);
    void replaceResourceSignal(OAIResourceRead summary);
    void updateResourceSignal(OAIResourceRead summary);

    void createResourceSignalFull(OAIHttpRequestWorker *worker, OAIResourceRead summary);
    void deleteResourceSignalFull(OAIHttpRequestWorker *worker);
    void getResourceSignalFull(OAIHttpRequestWorker *worker, OAIResourceRead summary);
    void listResourcesSignalFull(OAIHttpRequestWorker *worker, QList<OAIResourceRead> summary);
    void replaceResourceSignalFull(OAIHttpRequestWorker *worker, OAIResourceRead summary);
    void updateResourceSignalFull(OAIHttpRequestWorker *worker, OAIResourceRead summary);

    void createResourceSignalE(OAIResourceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceSignalE(OAIResourceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourcesSignalE(QList<OAIResourceRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceResourceSignalE(OAIResourceRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResourceSignalE(OAIResourceRead summary, QNetworkReply::NetworkError error_type, QString error_str);

    void createResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourcesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
