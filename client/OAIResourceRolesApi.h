/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceRolesApi_H
#define OAI_OAIResourceRolesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddRolePermissions.h"
#include "OAIHTTPValidationError.h"
#include "OAIRemoveRolePermissions.h"
#include "OAIResourceRoleCreate.h"
#include "OAIResourceRoleRead.h"
#include "OAIResourceRoleUpdate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceRolesApi : public QObject {
    Q_OBJECT

public:
    OAIResourceRolesApi(const int timeOut = 0);
    ~OAIResourceRolesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  parent_role_id QString [required]
    */
    void addParentResourceRole(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &role_id, const QString &parent_role_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_add_role_permissions OAIAddRolePermissions [required]
    */
    void assignPermissionsToResourceRole(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &role_id, const OAIAddRolePermissions &oai_add_role_permissions);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  oai_resource_role_create OAIResourceRoleCreate [required]
    */
    void createResourceRole(const QString &proj_id, const QString &env_id, const QString &resource_id, const OAIResourceRoleCreate &oai_resource_role_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  role_id QString [required]
    */
    void deleteResourceRole(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &role_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  role_id QString [required]
    */
    void getResourceRole(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &role_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listResourceRoles(const QString &proj_id, const QString &env_id, const QString &resource_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  parent_role_id QString [required]
    */
    void removeParentResourceRole(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &role_id, const QString &parent_role_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_remove_role_permissions OAIRemoveRolePermissions [required]
    */
    void removePermissionsFromResourceRole(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &role_id, const OAIRemoveRolePermissions &oai_remove_role_permissions);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  resource_id QString [required]
    * @param[in]  role_id QString [required]
    * @param[in]  oai_resource_role_update OAIResourceRoleUpdate [required]
    */
    void updateResourceRole(const QString &proj_id, const QString &env_id, const QString &resource_id, const QString &role_id, const OAIResourceRoleUpdate &oai_resource_role_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addParentResourceRoleCallback(OAIHttpRequestWorker *worker);
    void assignPermissionsToResourceRoleCallback(OAIHttpRequestWorker *worker);
    void createResourceRoleCallback(OAIHttpRequestWorker *worker);
    void deleteResourceRoleCallback(OAIHttpRequestWorker *worker);
    void getResourceRoleCallback(OAIHttpRequestWorker *worker);
    void listResourceRolesCallback(OAIHttpRequestWorker *worker);
    void removeParentResourceRoleCallback(OAIHttpRequestWorker *worker);
    void removePermissionsFromResourceRoleCallback(OAIHttpRequestWorker *worker);
    void updateResourceRoleCallback(OAIHttpRequestWorker *worker);

signals:

    void addParentResourceRoleSignal(OAIResourceRoleRead summary);
    void assignPermissionsToResourceRoleSignal(OAIResourceRoleRead summary);
    void createResourceRoleSignal(OAIResourceRoleRead summary);
    void deleteResourceRoleSignal();
    void getResourceRoleSignal(OAIResourceRoleRead summary);
    void listResourceRolesSignal(QList<OAIResourceRoleRead> summary);
    void removeParentResourceRoleSignal(OAIResourceRoleRead summary);
    void removePermissionsFromResourceRoleSignal(OAIResourceRoleRead summary);
    void updateResourceRoleSignal(OAIResourceRoleRead summary);

    void addParentResourceRoleSignalFull(OAIHttpRequestWorker *worker, OAIResourceRoleRead summary);
    void assignPermissionsToResourceRoleSignalFull(OAIHttpRequestWorker *worker, OAIResourceRoleRead summary);
    void createResourceRoleSignalFull(OAIHttpRequestWorker *worker, OAIResourceRoleRead summary);
    void deleteResourceRoleSignalFull(OAIHttpRequestWorker *worker);
    void getResourceRoleSignalFull(OAIHttpRequestWorker *worker, OAIResourceRoleRead summary);
    void listResourceRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIResourceRoleRead> summary);
    void removeParentResourceRoleSignalFull(OAIHttpRequestWorker *worker, OAIResourceRoleRead summary);
    void removePermissionsFromResourceRoleSignalFull(OAIHttpRequestWorker *worker, OAIResourceRoleRead summary);
    void updateResourceRoleSignalFull(OAIHttpRequestWorker *worker, OAIResourceRoleRead summary);

    void addParentResourceRoleSignalE(OAIResourceRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignPermissionsToResourceRoleSignalE(OAIResourceRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createResourceRoleSignalE(OAIResourceRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourceRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceRoleSignalE(OAIResourceRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourceRolesSignalE(QList<OAIResourceRoleRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeParentResourceRoleSignalE(OAIResourceRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removePermissionsFromResourceRoleSignalE(OAIResourceRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResourceRoleSignalE(OAIResourceRoleRead summary, QNetworkReply::NetworkError error_type, QString error_str);

    void addParentResourceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignPermissionsToResourceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createResourceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteResourceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getResourceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listResourceRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeParentResourceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removePermissionsFromResourceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateResourceRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
