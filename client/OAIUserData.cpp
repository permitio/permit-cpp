/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserData::OAIUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserData::OAIUserData() {
    this->initializeModel();
}

OAIUserData::~OAIUserData() {}

void OAIUserData::initializeModel() {

    m_role_assignments_isSet = false;
    m_role_assignments_isValid = false;

    m_attributes_isSet = false;
    m_attributes_isValid = false;
}

void OAIUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserData::fromJsonObject(QJsonObject json) {

    if(json["roleAssignments"].isObject()){
        auto varmap = json["roleAssignments"].toObject().toVariantMap();
        m_role_assignments_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_role_assignments_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_role_assignments_isSet &= !jval.isNull() && m_role_assignments_isValid;
                role_assignments.insert(role_assignments.end(), val, item);
            }
        }
    }

    m_attributes_isValid = ::OpenAPI::fromJsonValue(attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;
}

QString OAIUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserData::asJsonObject() const {
    QJsonObject obj;
    if (role_assignments.size() > 0) {
        
        obj.insert(QString("roleAssignments"), toJsonValue(role_assignments));
    }
    if (attributes.size() > 0) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(attributes));
    }
    return obj;
}

QMap<QString, QList<QString>> OAIUserData::getRoleAssignments() const {
    return role_assignments;
}
void OAIUserData::setRoleAssignments(const QMap<QString, QList<QString>> &role_assignments) {
    this->role_assignments = role_assignments;
    this->m_role_assignments_isSet = true;
}

bool OAIUserData::is_role_assignments_Set() const{
    return m_role_assignments_isSet;
}

bool OAIUserData::is_role_assignments_Valid() const{
    return m_role_assignments_isValid;
}

QMap<QString, OAIAttributes> OAIUserData::getAttributes() const {
    return attributes;
}
void OAIUserData::setAttributes(const QMap<QString, OAIAttributes> &attributes) {
    this->attributes = attributes;
    this->m_attributes_isSet = true;
}

bool OAIUserData::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAIUserData::is_attributes_Valid() const{
    return m_attributes_isValid;
}

bool OAIUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (role_assignments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
