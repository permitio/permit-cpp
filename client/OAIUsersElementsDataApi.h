/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersElementsDataApi_H
#define OAI_OAIUsersElementsDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIElementsRoleRead.h"
#include "OAIElementsUserCreate.h"
#include "OAIElementsUserRoleCreate.h"
#include "OAIElementsUserRoleRemove.h"
#include "OAIHTTPValidationError.h"
#include "OAIPaginatedResult_UserRead_.h"
#include "OAIRoleAssignmentRead.h"
#include "OAIUserRead.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersElementsDataApi : public QObject {
    Q_OBJECT

public:
    OAIUsersElementsDataApi(const int timeOut = 0);
    ~OAIUsersElementsDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  elements_config_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_elements_user_role_create OAIElementsUserRoleCreate [required]
    */
    void elementsAssignRoleToUser(const QString &proj_id, const QString &env_id, const QString &elements_config_id, const QString &user_id, const OAIElementsUserRoleCreate &oai_elements_user_role_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  elements_config_id QString [required]
    * @param[in]  oai_elements_user_create OAIElementsUserCreate [required]
    */
    void elementsCreateUser(const QString &proj_id, const QString &env_id, const QString &elements_config_id, const OAIElementsUserCreate &oai_elements_user_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  elements_config_id QString [required]
    * @param[in]  user_id QString [required]
    */
    void elementsDeleteUser(const QString &proj_id, const QString &env_id, const QString &elements_config_id, const QString &user_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  elements_config_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void elementsListRoles(const QString &proj_id, const QString &env_id, const QString &elements_config_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  elements_config_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void elementsListUsers(const QString &proj_id, const QString &env_id, const QString &elements_config_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  elements_config_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_elements_user_role_remove OAIElementsUserRoleRemove [required]
    */
    void elementsUnassignRoleFromUser(const QString &proj_id, const QString &env_id, const QString &elements_config_id, const QString &user_id, const OAIElementsUserRoleRemove &oai_elements_user_role_remove);

    /**
    * @param[in]  elements_config_id QString [required]
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    */
    void setConfigActive(const QString &elements_config_id, const QString &proj_id, const QString &env_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void elementsAssignRoleToUserCallback(OAIHttpRequestWorker *worker);
    void elementsCreateUserCallback(OAIHttpRequestWorker *worker);
    void elementsDeleteUserCallback(OAIHttpRequestWorker *worker);
    void elementsListRolesCallback(OAIHttpRequestWorker *worker);
    void elementsListUsersCallback(OAIHttpRequestWorker *worker);
    void elementsUnassignRoleFromUserCallback(OAIHttpRequestWorker *worker);
    void setConfigActiveCallback(OAIHttpRequestWorker *worker);

signals:

    void elementsAssignRoleToUserSignal(OAIRoleAssignmentRead summary);
    void elementsCreateUserSignal(OAIUserRead summary);
    void elementsDeleteUserSignal();
    void elementsListRolesSignal(QList<OAIElementsRoleRead> summary);
    void elementsListUsersSignal(OAIPaginatedResult_UserRead_ summary);
    void elementsUnassignRoleFromUserSignal();
    void setConfigActiveSignal();

    void elementsAssignRoleToUserSignalFull(OAIHttpRequestWorker *worker, OAIRoleAssignmentRead summary);
    void elementsCreateUserSignalFull(OAIHttpRequestWorker *worker, OAIUserRead summary);
    void elementsDeleteUserSignalFull(OAIHttpRequestWorker *worker);
    void elementsListRolesSignalFull(OAIHttpRequestWorker *worker, QList<OAIElementsRoleRead> summary);
    void elementsListUsersSignalFull(OAIHttpRequestWorker *worker, OAIPaginatedResult_UserRead_ summary);
    void elementsUnassignRoleFromUserSignalFull(OAIHttpRequestWorker *worker);
    void setConfigActiveSignalFull(OAIHttpRequestWorker *worker);

    void elementsAssignRoleToUserSignalE(OAIRoleAssignmentRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsCreateUserSignalE(OAIUserRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsDeleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void elementsListRolesSignalE(QList<OAIElementsRoleRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsListUsersSignalE(OAIPaginatedResult_UserRead_ summary, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsUnassignRoleFromUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setConfigActiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);

    void elementsAssignRoleToUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsCreateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsDeleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsListRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsListUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void elementsUnassignRoleFromUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setConfigActiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
