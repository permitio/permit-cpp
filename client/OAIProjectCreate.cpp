/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectCreate::OAIProjectCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectCreate::OAIProjectCreate() {
    this->initializeModel();
}

OAIProjectCreate::~OAIProjectCreate() {}

void OAIProjectCreate::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_urn_namespace_isSet = false;
    m_urn_namespace_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_active_policy_repo_id_isSet = false;
    m_active_policy_repo_id_isValid = false;
}

void OAIProjectCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectCreate::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_urn_namespace_isValid = ::OpenAPI::fromJsonValue(urn_namespace, json[QString("urn_namespace")]);
    m_urn_namespace_isSet = !json[QString("urn_namespace")].isNull() && m_urn_namespace_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_active_policy_repo_id_isValid = ::OpenAPI::fromJsonValue(active_policy_repo_id, json[QString("active_policy_repo_id")]);
    m_active_policy_repo_id_isSet = !json[QString("active_policy_repo_id")].isNull() && m_active_policy_repo_id_isValid;
}

QString OAIProjectCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(key));
    }
    if (m_urn_namespace_isSet) {
        obj.insert(QString("urn_namespace"), ::OpenAPI::toJsonValue(urn_namespace));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (m_settings_isSet) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(settings));
    }
    if (m_active_policy_repo_id_isSet) {
        obj.insert(QString("active_policy_repo_id"), ::OpenAPI::toJsonValue(active_policy_repo_id));
    }
    return obj;
}

QString OAIProjectCreate::getKey() const {
    return key;
}
void OAIProjectCreate::setKey(const QString &key) {
    this->key = key;
    this->m_key_isSet = true;
}

bool OAIProjectCreate::is_key_Set() const{
    return m_key_isSet;
}

bool OAIProjectCreate::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIProjectCreate::getUrnNamespace() const {
    return urn_namespace;
}
void OAIProjectCreate::setUrnNamespace(const QString &urn_namespace) {
    this->urn_namespace = urn_namespace;
    this->m_urn_namespace_isSet = true;
}

bool OAIProjectCreate::is_urn_namespace_Set() const{
    return m_urn_namespace_isSet;
}

bool OAIProjectCreate::is_urn_namespace_Valid() const{
    return m_urn_namespace_isValid;
}

QString OAIProjectCreate::getName() const {
    return name;
}
void OAIProjectCreate::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIProjectCreate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectCreate::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProjectCreate::getDescription() const {
    return description;
}
void OAIProjectCreate::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIProjectCreate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProjectCreate::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIProjectCreate::getSettings() const {
    return settings;
}
void OAIProjectCreate::setSettings(const OAIObject &settings) {
    this->settings = settings;
    this->m_settings_isSet = true;
}

bool OAIProjectCreate::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIProjectCreate::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIProjectCreate::getActivePolicyRepoId() const {
    return active_policy_repo_id;
}
void OAIProjectCreate::setActivePolicyRepoId(const QString &active_policy_repo_id) {
    this->active_policy_repo_id = active_policy_repo_id;
    this->m_active_policy_repo_id_isSet = true;
}

bool OAIProjectCreate::is_active_policy_repo_id_Set() const{
    return m_active_policy_repo_id_isSet;
}

bool OAIProjectCreate::is_active_policy_repo_id_Valid() const{
    return m_active_policy_repo_id_isValid;
}

bool OAIProjectCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urn_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_policy_repo_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
