/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatistics::OAIStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatistics::OAIStatistics() {
    this->initializeModel();
}

OAIStatistics::~OAIStatistics() {}

void OAIStatistics::initializeModel() {

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_tenants_isSet = false;
    m_tenants_isValid = false;

    m_has_decision_logs_isSet = false;
    m_has_decision_logs_isValid = false;
}

void OAIStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatistics::fromJsonObject(QJsonObject json) {

    m_roles_isValid = ::OpenAPI::fromJsonValue(roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_policies_isValid = ::OpenAPI::fromJsonValue(policies, json[QString("policies")]);
    m_policies_isSet = !json[QString("policies")].isNull() && m_policies_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_tenants_isValid = ::OpenAPI::fromJsonValue(tenants, json[QString("tenants")]);
    m_tenants_isSet = !json[QString("tenants")].isNull() && m_tenants_isValid;

    m_has_decision_logs_isValid = ::OpenAPI::fromJsonValue(has_decision_logs, json[QString("has_decision_logs")]);
    m_has_decision_logs_isSet = !json[QString("has_decision_logs")].isNull() && m_has_decision_logs_isValid;
}

QString OAIStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_roles_isSet) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(roles));
    }
    if (m_users_isSet) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(users));
    }
    if (m_policies_isSet) {
        obj.insert(QString("policies"), ::OpenAPI::toJsonValue(policies));
    }
    if (m_resources_isSet) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(resources));
    }
    if (m_tenants_isSet) {
        obj.insert(QString("tenants"), ::OpenAPI::toJsonValue(tenants));
    }
    if (m_has_decision_logs_isSet) {
        obj.insert(QString("has_decision_logs"), ::OpenAPI::toJsonValue(has_decision_logs));
    }
    return obj;
}

qint32 OAIStatistics::getRoles() const {
    return roles;
}
void OAIStatistics::setRoles(const qint32 &roles) {
    this->roles = roles;
    this->m_roles_isSet = true;
}

bool OAIStatistics::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIStatistics::is_roles_Valid() const{
    return m_roles_isValid;
}

qint32 OAIStatistics::getUsers() const {
    return users;
}
void OAIStatistics::setUsers(const qint32 &users) {
    this->users = users;
    this->m_users_isSet = true;
}

bool OAIStatistics::is_users_Set() const{
    return m_users_isSet;
}

bool OAIStatistics::is_users_Valid() const{
    return m_users_isValid;
}

qint32 OAIStatistics::getPolicies() const {
    return policies;
}
void OAIStatistics::setPolicies(const qint32 &policies) {
    this->policies = policies;
    this->m_policies_isSet = true;
}

bool OAIStatistics::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIStatistics::is_policies_Valid() const{
    return m_policies_isValid;
}

qint32 OAIStatistics::getResources() const {
    return resources;
}
void OAIStatistics::setResources(const qint32 &resources) {
    this->resources = resources;
    this->m_resources_isSet = true;
}

bool OAIStatistics::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIStatistics::is_resources_Valid() const{
    return m_resources_isValid;
}

qint32 OAIStatistics::getTenants() const {
    return tenants;
}
void OAIStatistics::setTenants(const qint32 &tenants) {
    this->tenants = tenants;
    this->m_tenants_isSet = true;
}

bool OAIStatistics::is_tenants_Set() const{
    return m_tenants_isSet;
}

bool OAIStatistics::is_tenants_Valid() const{
    return m_tenants_isValid;
}

bool OAIStatistics::isHasDecisionLogs() const {
    return has_decision_logs;
}
void OAIStatistics::setHasDecisionLogs(const bool &has_decision_logs) {
    this->has_decision_logs = has_decision_logs;
    this->m_has_decision_logs_isSet = true;
}

bool OAIStatistics::is_has_decision_logs_Set() const{
    return m_has_decision_logs_isSet;
}

bool OAIStatistics::is_has_decision_logs_Valid() const{
    return m_has_decision_logs_isValid;
}

bool OAIStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_roles_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_decision_logs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_roles_isValid && m_users_isValid && m_policies_isValid && m_resources_isValid && m_tenants_isValid && m_has_decision_logs_isValid && true;
}

} // namespace OpenAPI
