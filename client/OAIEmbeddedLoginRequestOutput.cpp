/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmbeddedLoginRequestOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmbeddedLoginRequestOutput::OAIEmbeddedLoginRequestOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmbeddedLoginRequestOutput::OAIEmbeddedLoginRequestOutput() {
    this->initializeModel();
}

OAIEmbeddedLoginRequestOutput::~OAIEmbeddedLoginRequestOutput() {}

void OAIEmbeddedLoginRequestOutput::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_extra_isSet = false;
    m_extra_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;
}

void OAIEmbeddedLoginRequestOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmbeddedLoginRequestOutput::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(error_code, json[QString("error_code")]);
    m_error_code_isSet = !json[QString("error_code")].isNull() && m_error_code_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_extra_isValid = ::OpenAPI::fromJsonValue(extra, json[QString("extra")]);
    m_extra_isSet = !json[QString("extra")].isNull() && m_extra_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(redirect_url, json[QString("redirect_url")]);
    m_redirect_url_isSet = !json[QString("redirect_url")].isNull() && m_redirect_url_isValid;
}

QString OAIEmbeddedLoginRequestOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmbeddedLoginRequestOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(error));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("error_code"), ::OpenAPI::toJsonValue(error_code));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(token));
    }
    if (m_extra_isSet) {
        obj.insert(QString("extra"), ::OpenAPI::toJsonValue(extra));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirect_url"), ::OpenAPI::toJsonValue(redirect_url));
    }
    return obj;
}

QString OAIEmbeddedLoginRequestOutput::getError() const {
    return error;
}
void OAIEmbeddedLoginRequestOutput::setError(const QString &error) {
    this->error = error;
    this->m_error_isSet = true;
}

bool OAIEmbeddedLoginRequestOutput::is_error_Set() const{
    return m_error_isSet;
}

bool OAIEmbeddedLoginRequestOutput::is_error_Valid() const{
    return m_error_isValid;
}

qint32 OAIEmbeddedLoginRequestOutput::getErrorCode() const {
    return error_code;
}
void OAIEmbeddedLoginRequestOutput::setErrorCode(const qint32 &error_code) {
    this->error_code = error_code;
    this->m_error_code_isSet = true;
}

bool OAIEmbeddedLoginRequestOutput::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIEmbeddedLoginRequestOutput::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIEmbeddedLoginRequestOutput::getToken() const {
    return token;
}
void OAIEmbeddedLoginRequestOutput::setToken(const QString &token) {
    this->token = token;
    this->m_token_isSet = true;
}

bool OAIEmbeddedLoginRequestOutput::is_token_Set() const{
    return m_token_isSet;
}

bool OAIEmbeddedLoginRequestOutput::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIEmbeddedLoginRequestOutput::getExtra() const {
    return extra;
}
void OAIEmbeddedLoginRequestOutput::setExtra(const QString &extra) {
    this->extra = extra;
    this->m_extra_isSet = true;
}

bool OAIEmbeddedLoginRequestOutput::is_extra_Set() const{
    return m_extra_isSet;
}

bool OAIEmbeddedLoginRequestOutput::is_extra_Valid() const{
    return m_extra_isValid;
}

QString OAIEmbeddedLoginRequestOutput::getRedirectUrl() const {
    return redirect_url;
}
void OAIEmbeddedLoginRequestOutput::setRedirectUrl(const QString &redirect_url) {
    this->redirect_url = redirect_url;
    this->m_redirect_url_isSet = true;
}

bool OAIEmbeddedLoginRequestOutput::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAIEmbeddedLoginRequestOutput::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

bool OAIEmbeddedLoginRequestOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmbeddedLoginRequestOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_redirect_url_isValid && true;
}

} // namespace OpenAPI
