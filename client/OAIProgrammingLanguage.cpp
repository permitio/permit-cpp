/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProgrammingLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProgrammingLanguage::OAIProgrammingLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProgrammingLanguage::OAIProgrammingLanguage() {
    this->initializeModel();
}

OAIProgrammingLanguage::~OAIProgrammingLanguage() {}

void OAIProgrammingLanguage::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProgrammingLanguage::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProgrammingLanguage::fromJson(QString jsonString) {
    
    if ( jsonString.compare("javascript", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgrammingLanguage::JAVASCRIPT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("python", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgrammingLanguage::PYTHON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dotnet", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgrammingLanguage::DOTNET;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("golang", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgrammingLanguage::GOLANG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("java", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgrammingLanguage::JAVA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("kong_gateway", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProgrammingLanguage::KONG_GATEWAY;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProgrammingLanguage::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProgrammingLanguage::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProgrammingLanguage::JAVASCRIPT:
            val = "javascript";
            break;
        case eOAIProgrammingLanguage::PYTHON:
            val = "python";
            break;
        case eOAIProgrammingLanguage::DOTNET:
            val = "dotnet";
            break;
        case eOAIProgrammingLanguage::GOLANG:
            val = "golang";
            break;
        case eOAIProgrammingLanguage::JAVA:
            val = "java";
            break;
        case eOAIProgrammingLanguage::KONG_GATEWAY:
            val = "kong_gateway";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProgrammingLanguage::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProgrammingLanguage::eOAIProgrammingLanguage OAIProgrammingLanguage::getValue() const {
    return m_value;
}

void OAIProgrammingLanguage::setValue(const OAIProgrammingLanguage::eOAIProgrammingLanguage& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProgrammingLanguage::isSet() const {
    
    return m_value_isSet;
}

bool OAIProgrammingLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
