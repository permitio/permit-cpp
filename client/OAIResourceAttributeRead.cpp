/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceAttributeRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceAttributeRead::OAIResourceAttributeRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceAttributeRead::OAIResourceAttributeRead() {
    this->initializeModel();
}

OAIResourceAttributeRead::~OAIResourceAttributeRead() {}

void OAIResourceAttributeRead::initializeModel() {

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_key_isSet = false;
    m_resource_key_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIResourceAttributeRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceAttributeRead::fromJsonObject(QJsonObject json) {

    m_type_isValid = ::OpenAPI::fromJsonValue(type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(resource_id, json[QString("resource_id")]);
    m_resource_id_isSet = !json[QString("resource_id")].isNull() && m_resource_id_isValid;

    m_resource_key_isValid = ::OpenAPI::fromJsonValue(resource_key, json[QString("resource_key")]);
    m_resource_key_isSet = !json[QString("resource_key")].isNull() && m_resource_key_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIResourceAttributeRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceAttributeRead::asJsonObject() const {
    QJsonObject obj;
    if (type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(key));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resource_id"), ::OpenAPI::toJsonValue(resource_id));
    }
    if (m_resource_key_isSet) {
        obj.insert(QString("resource_key"), ::OpenAPI::toJsonValue(resource_key));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(organization_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(environment_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(updated_at));
    }
    return obj;
}

OAIAttributeType OAIResourceAttributeRead::getType() const {
    return type;
}
void OAIResourceAttributeRead::setType(const OAIAttributeType &type) {
    this->type = type;
    this->m_type_isSet = true;
}

bool OAIResourceAttributeRead::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceAttributeRead::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIResourceAttributeRead::getDescription() const {
    return description;
}
void OAIResourceAttributeRead::setDescription(const QString &description) {
    this->description = description;
    this->m_description_isSet = true;
}

bool OAIResourceAttributeRead::is_description_Set() const{
    return m_description_isSet;
}

bool OAIResourceAttributeRead::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIResourceAttributeRead::getKey() const {
    return key;
}
void OAIResourceAttributeRead::setKey(const QString &key) {
    this->key = key;
    this->m_key_isSet = true;
}

bool OAIResourceAttributeRead::is_key_Set() const{
    return m_key_isSet;
}

bool OAIResourceAttributeRead::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIResourceAttributeRead::getId() const {
    return id;
}
void OAIResourceAttributeRead::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIResourceAttributeRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceAttributeRead::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResourceAttributeRead::getResourceId() const {
    return resource_id;
}
void OAIResourceAttributeRead::setResourceId(const QString &resource_id) {
    this->resource_id = resource_id;
    this->m_resource_id_isSet = true;
}

bool OAIResourceAttributeRead::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceAttributeRead::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

QString OAIResourceAttributeRead::getResourceKey() const {
    return resource_key;
}
void OAIResourceAttributeRead::setResourceKey(const QString &resource_key) {
    this->resource_key = resource_key;
    this->m_resource_key_isSet = true;
}

bool OAIResourceAttributeRead::is_resource_key_Set() const{
    return m_resource_key_isSet;
}

bool OAIResourceAttributeRead::is_resource_key_Valid() const{
    return m_resource_key_isValid;
}

QString OAIResourceAttributeRead::getOrganizationId() const {
    return organization_id;
}
void OAIResourceAttributeRead::setOrganizationId(const QString &organization_id) {
    this->organization_id = organization_id;
    this->m_organization_id_isSet = true;
}

bool OAIResourceAttributeRead::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIResourceAttributeRead::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIResourceAttributeRead::getProjectId() const {
    return project_id;
}
void OAIResourceAttributeRead::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIResourceAttributeRead::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIResourceAttributeRead::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIResourceAttributeRead::getEnvironmentId() const {
    return environment_id;
}
void OAIResourceAttributeRead::setEnvironmentId(const QString &environment_id) {
    this->environment_id = environment_id;
    this->m_environment_id_isSet = true;
}

bool OAIResourceAttributeRead::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIResourceAttributeRead::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAIResourceAttributeRead::getCreatedAt() const {
    return created_at;
}
void OAIResourceAttributeRead::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIResourceAttributeRead::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIResourceAttributeRead::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIResourceAttributeRead::getUpdatedAt() const {
    return updated_at;
}
void OAIResourceAttributeRead::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool OAIResourceAttributeRead::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIResourceAttributeRead::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIResourceAttributeRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceAttributeRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_key_isValid && m_id_isValid && m_resource_id_isValid && m_resource_key_isValid && m_organization_id_isValid && m_project_id_isValid && m_environment_id_isValid && m_created_at_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
