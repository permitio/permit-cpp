/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleAssignmentRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleAssignmentRead::OAIRoleAssignmentRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleAssignmentRead::OAIRoleAssignmentRead() {
    this->initializeModel();
}

OAIRoleAssignmentRead::~OAIRoleAssignmentRead() {}

void OAIRoleAssignmentRead::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;
}

void OAIRoleAssignmentRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleAssignmentRead::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(role_id, json[QString("role_id")]);
    m_role_id_isSet = !json[QString("role_id")].isNull() && m_role_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(tenant_id, json[QString("tenant_id")]);
    m_tenant_id_isSet = !json[QString("tenant_id")].isNull() && m_tenant_id_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;
}

QString OAIRoleAssignmentRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleAssignmentRead::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(user));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(role));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(tenant));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(user_id));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("role_id"), ::OpenAPI::toJsonValue(role_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenant_id"), ::OpenAPI::toJsonValue(tenant_id));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(organization_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(environment_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    return obj;
}

QString OAIRoleAssignmentRead::getId() const {
    return id;
}
void OAIRoleAssignmentRead::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIRoleAssignmentRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoleAssignmentRead::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRoleAssignmentRead::getUser() const {
    return user;
}
void OAIRoleAssignmentRead::setUser(const QString &user) {
    this->user = user;
    this->m_user_isSet = true;
}

bool OAIRoleAssignmentRead::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRoleAssignmentRead::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIRoleAssignmentRead::getRole() const {
    return role;
}
void OAIRoleAssignmentRead::setRole(const QString &role) {
    this->role = role;
    this->m_role_isSet = true;
}

bool OAIRoleAssignmentRead::is_role_Set() const{
    return m_role_isSet;
}

bool OAIRoleAssignmentRead::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIRoleAssignmentRead::getTenant() const {
    return tenant;
}
void OAIRoleAssignmentRead::setTenant(const QString &tenant) {
    this->tenant = tenant;
    this->m_tenant_isSet = true;
}

bool OAIRoleAssignmentRead::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIRoleAssignmentRead::is_tenant_Valid() const{
    return m_tenant_isValid;
}

QString OAIRoleAssignmentRead::getUserId() const {
    return user_id;
}
void OAIRoleAssignmentRead::setUserId(const QString &user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

bool OAIRoleAssignmentRead::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIRoleAssignmentRead::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIRoleAssignmentRead::getRoleId() const {
    return role_id;
}
void OAIRoleAssignmentRead::setRoleId(const QString &role_id) {
    this->role_id = role_id;
    this->m_role_id_isSet = true;
}

bool OAIRoleAssignmentRead::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIRoleAssignmentRead::is_role_id_Valid() const{
    return m_role_id_isValid;
}

QString OAIRoleAssignmentRead::getTenantId() const {
    return tenant_id;
}
void OAIRoleAssignmentRead::setTenantId(const QString &tenant_id) {
    this->tenant_id = tenant_id;
    this->m_tenant_id_isSet = true;
}

bool OAIRoleAssignmentRead::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIRoleAssignmentRead::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIRoleAssignmentRead::getOrganizationId() const {
    return organization_id;
}
void OAIRoleAssignmentRead::setOrganizationId(const QString &organization_id) {
    this->organization_id = organization_id;
    this->m_organization_id_isSet = true;
}

bool OAIRoleAssignmentRead::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIRoleAssignmentRead::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIRoleAssignmentRead::getProjectId() const {
    return project_id;
}
void OAIRoleAssignmentRead::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIRoleAssignmentRead::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIRoleAssignmentRead::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIRoleAssignmentRead::getEnvironmentId() const {
    return environment_id;
}
void OAIRoleAssignmentRead::setEnvironmentId(const QString &environment_id) {
    this->environment_id = environment_id;
    this->m_environment_id_isSet = true;
}

bool OAIRoleAssignmentRead::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIRoleAssignmentRead::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAIRoleAssignmentRead::getCreatedAt() const {
    return created_at;
}
void OAIRoleAssignmentRead::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIRoleAssignmentRead::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRoleAssignmentRead::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIRoleAssignmentRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleAssignmentRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_user_isValid && m_role_isValid && m_tenant_isValid && m_user_id_isValid && m_role_id_isValid && m_tenant_id_isValid && m_organization_id_isValid && m_project_id_isValid && m_environment_id_isValid && m_created_at_isValid && true;
}

} // namespace OpenAPI
