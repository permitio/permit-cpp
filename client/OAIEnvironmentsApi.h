/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnvironmentsApi_H
#define OAI_OAIEnvironmentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEnvironmentCreate.h"
#include "OAIEnvironmentRead.h"
#include "OAIEnvironmentStats.h"
#include "OAIEnvironmentUpdate.h"
#include "OAIHTTPValidationError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnvironmentsApi : public QObject {
    Q_OBJECT

public:
    OAIEnvironmentsApi(const int timeOut = 0);
    ~OAIEnvironmentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  oai_environment_create OAIEnvironmentCreate [required]
    */
    void createEnvironment(const QString &proj_id, const OAIEnvironmentCreate &oai_environment_create);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    */
    void deleteEnvironment(const QString &proj_id, const QString &env_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    */
    void getEnvironment(const QString &proj_id, const QString &env_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listEnvironments(const QString &proj_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    */
    void statsEnvironments(const QString &proj_id, const QString &env_id);

    /**
    * @param[in]  proj_id QString [required]
    * @param[in]  env_id QString [required]
    * @param[in]  oai_environment_update OAIEnvironmentUpdate [required]
    */
    void updateEnvironment(const QString &proj_id, const QString &env_id, const OAIEnvironmentUpdate &oai_environment_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEnvironmentCallback(OAIHttpRequestWorker *worker);
    void deleteEnvironmentCallback(OAIHttpRequestWorker *worker);
    void getEnvironmentCallback(OAIHttpRequestWorker *worker);
    void listEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void statsEnvironmentsCallback(OAIHttpRequestWorker *worker);
    void updateEnvironmentCallback(OAIHttpRequestWorker *worker);

signals:

    void createEnvironmentSignal(OAIEnvironmentRead summary);
    void deleteEnvironmentSignal();
    void getEnvironmentSignal(OAIEnvironmentRead summary);
    void listEnvironmentsSignal(QList<OAIEnvironmentRead> summary);
    void statsEnvironmentsSignal(OAIEnvironmentStats summary);
    void updateEnvironmentSignal(OAIEnvironmentRead summary);

    void createEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentRead summary);
    void deleteEnvironmentSignalFull(OAIHttpRequestWorker *worker);
    void getEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentRead summary);
    void listEnvironmentsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnvironmentRead> summary);
    void statsEnvironmentsSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentStats summary);
    void updateEnvironmentSignalFull(OAIHttpRequestWorker *worker, OAIEnvironmentRead summary);

    void createEnvironmentSignalE(OAIEnvironmentRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvironmentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentSignalE(OAIEnvironmentRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEnvironmentsSignalE(QList<OAIEnvironmentRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void statsEnvironmentsSignalE(OAIEnvironmentStats summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvironmentSignalE(OAIEnvironmentRead summary, QNetworkReply::NetworkError error_type, QString error_str);

    void createEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void statsEnvironmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvironmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
