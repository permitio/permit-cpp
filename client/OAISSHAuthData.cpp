/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISSHAuthData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISSHAuthData::OAISSHAuthData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISSHAuthData::OAISSHAuthData() {
    this->initializeModel();
}

OAISSHAuthData::~OAISSHAuthData() {}

void OAISSHAuthData::initializeModel() {

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;
}

void OAISSHAuthData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISSHAuthData::fromJsonObject(QJsonObject json) {

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(auth_type, json[QString("auth_type")]);
    m_auth_type_isSet = !json[QString("auth_type")].isNull() && m_auth_type_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(public_key, json[QString("public_key")]);
    m_public_key_isSet = !json[QString("public_key")].isNull() && m_public_key_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(private_key, json[QString("private_key")]);
    m_private_key_isSet = !json[QString("private_key")].isNull() && m_private_key_isValid;
}

QString OAISSHAuthData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISSHAuthData::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_type_isSet) {
        obj.insert(QString("auth_type"), ::OpenAPI::toJsonValue(auth_type));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(username));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("public_key"), ::OpenAPI::toJsonValue(public_key));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("private_key"), ::OpenAPI::toJsonValue(private_key));
    }
    return obj;
}

QString OAISSHAuthData::getAuthType() const {
    return auth_type;
}
void OAISSHAuthData::setAuthType(const QString &auth_type) {
    this->auth_type = auth_type;
    this->m_auth_type_isSet = true;
}

bool OAISSHAuthData::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAISSHAuthData::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAISSHAuthData::getUsername() const {
    return username;
}
void OAISSHAuthData::setUsername(const QString &username) {
    this->username = username;
    this->m_username_isSet = true;
}

bool OAISSHAuthData::is_username_Set() const{
    return m_username_isSet;
}

bool OAISSHAuthData::is_username_Valid() const{
    return m_username_isValid;
}

QString OAISSHAuthData::getPublicKey() const {
    return public_key;
}
void OAISSHAuthData::setPublicKey(const QString &public_key) {
    this->public_key = public_key;
    this->m_public_key_isSet = true;
}

bool OAISSHAuthData::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAISSHAuthData::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAISSHAuthData::getPrivateKey() const {
    return private_key;
}
void OAISSHAuthData::setPrivateKey(const QString &private_key) {
    this->private_key = private_key;
    this->m_private_key_isSet = true;
}

bool OAISSHAuthData::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAISSHAuthData::is_private_key_Valid() const{
    return m_private_key_isValid;
}

bool OAISSHAuthData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISSHAuthData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_username_isValid && m_private_key_isValid && true;
}

} // namespace OpenAPI
