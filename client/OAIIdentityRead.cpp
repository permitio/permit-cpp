/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityRead::OAIIdentityRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityRead::OAIIdentityRead() {
    this->initializeModel();
}

OAIIdentityRead::~OAIIdentityRead() {}

void OAIIdentityRead::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verified_isSet = false;
    m_email_verified_isValid = false;

    m_auth0_info_isSet = false;
    m_auth0_info_isValid = false;
}

void OAIIdentityRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityRead::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::OpenAPI::fromJsonValue(user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verified_isValid = ::OpenAPI::fromJsonValue(email_verified, json[QString("email_verified")]);
    m_email_verified_isSet = !json[QString("email_verified")].isNull() && m_email_verified_isValid;

    m_auth0_info_isValid = ::OpenAPI::fromJsonValue(auth0_info, json[QString("auth0_info")]);
    m_auth0_info_isSet = !json[QString("auth0_info")].isNull() && m_auth0_info_isValid;
}

QString OAIIdentityRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityRead::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(user_id));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(provider));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(sub));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(email));
    }
    if (m_email_verified_isSet) {
        obj.insert(QString("email_verified"), ::OpenAPI::toJsonValue(email_verified));
    }
    if (m_auth0_info_isSet) {
        obj.insert(QString("auth0_info"), ::OpenAPI::toJsonValue(auth0_info));
    }
    return obj;
}

QString OAIIdentityRead::getUserId() const {
    return user_id;
}
void OAIIdentityRead::setUserId(const QString &user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

bool OAIIdentityRead::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIIdentityRead::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIIdentityRead::getProvider() const {
    return provider;
}
void OAIIdentityRead::setProvider(const QString &provider) {
    this->provider = provider;
    this->m_provider_isSet = true;
}

bool OAIIdentityRead::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIIdentityRead::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIIdentityRead::getSub() const {
    return sub;
}
void OAIIdentityRead::setSub(const QString &sub) {
    this->sub = sub;
    this->m_sub_isSet = true;
}

bool OAIIdentityRead::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIIdentityRead::is_sub_Valid() const{
    return m_sub_isValid;
}

QString OAIIdentityRead::getEmail() const {
    return email;
}
void OAIIdentityRead::setEmail(const QString &email) {
    this->email = email;
    this->m_email_isSet = true;
}

bool OAIIdentityRead::is_email_Set() const{
    return m_email_isSet;
}

bool OAIIdentityRead::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIIdentityRead::isEmailVerified() const {
    return email_verified;
}
void OAIIdentityRead::setEmailVerified(const bool &email_verified) {
    this->email_verified = email_verified;
    this->m_email_verified_isSet = true;
}

bool OAIIdentityRead::is_email_verified_Set() const{
    return m_email_verified_isSet;
}

bool OAIIdentityRead::is_email_verified_Valid() const{
    return m_email_verified_isValid;
}

OAIObject OAIIdentityRead::getAuth0Info() const {
    return auth0_info;
}
void OAIIdentityRead::setAuth0Info(const OAIObject &auth0_info) {
    this->auth0_info = auth0_info;
    this->m_auth0_info_isSet = true;
}

bool OAIIdentityRead::is_auth0_info_Set() const{
    return m_auth0_info_isSet;
}

bool OAIIdentityRead::is_auth0_info_Valid() const{
    return m_auth0_info_isValid;
}

bool OAIIdentityRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth0_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_id_isValid && m_provider_isValid && m_sub_isValid && m_email_isValid && m_email_verified_isValid && m_auth0_info_isValid && true;
}

} // namespace OpenAPI
