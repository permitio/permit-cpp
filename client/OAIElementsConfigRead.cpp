/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElementsConfigRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElementsConfigRead::OAIElementsConfigRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElementsConfigRead::OAIElementsConfigRead() {
    this->initializeModel();
}

OAIElementsConfigRead::~OAIElementsConfigRead() {}

void OAIElementsConfigRead::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_elements_type_isSet = false;
    m_elements_type_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_roles_to_levels_isSet = false;
    m_roles_to_levels_isValid = false;

    m_webhook_isSet = false;
    m_webhook_isValid = false;
}

void OAIElementsConfigRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElementsConfigRead::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(project_id, json[QString("project_id")]);
    m_project_id_isSet = !json[QString("project_id")].isNull() && m_project_id_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(is_active, json[QString("is_active")]);
    m_is_active_isSet = !json[QString("is_active")].isNull() && m_is_active_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_elements_type_isValid = ::OpenAPI::fromJsonValue(elements_type, json[QString("elements_type")]);
    m_elements_type_isSet = !json[QString("elements_type")].isNull() && m_elements_type_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    if(json["roles_to_levels"].isObject()){
        auto varmap = json["roles_to_levels"].toObject().toVariantMap();
        m_roles_to_levels_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIPermissionLevelRoleRead> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_roles_to_levels_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_roles_to_levels_isSet &= !jval.isNull() && m_roles_to_levels_isValid;
                roles_to_levels.insert(roles_to_levels.end(), val, item);
            }
        }
    }

    m_webhook_isValid = ::OpenAPI::fromJsonValue(webhook, json[QString("webhook")]);
    m_webhook_isSet = !json[QString("webhook")].isNull() && m_webhook_isValid;
}

QString OAIElementsConfigRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElementsConfigRead::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(key));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(organization_id));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("project_id"), ::OpenAPI::toJsonValue(project_id));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(environment_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("is_active"), ::OpenAPI::toJsonValue(is_active));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (elements_type.isSet()) {
        obj.insert(QString("elements_type"), ::OpenAPI::toJsonValue(elements_type));
    }
    if (settings.size() > 0) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(settings));
    }
    if (roles_to_levels.size() > 0) {
        
        obj.insert(QString("roles_to_levels"), toJsonValue(roles_to_levels));
    }
    if (webhook.isSet()) {
        obj.insert(QString("webhook"), ::OpenAPI::toJsonValue(webhook));
    }
    return obj;
}

QString OAIElementsConfigRead::getKey() const {
    return key;
}
void OAIElementsConfigRead::setKey(const QString &key) {
    this->key = key;
    this->m_key_isSet = true;
}

bool OAIElementsConfigRead::is_key_Set() const{
    return m_key_isSet;
}

bool OAIElementsConfigRead::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIElementsConfigRead::getId() const {
    return id;
}
void OAIElementsConfigRead::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIElementsConfigRead::is_id_Set() const{
    return m_id_isSet;
}

bool OAIElementsConfigRead::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIElementsConfigRead::getOrganizationId() const {
    return organization_id;
}
void OAIElementsConfigRead::setOrganizationId(const QString &organization_id) {
    this->organization_id = organization_id;
    this->m_organization_id_isSet = true;
}

bool OAIElementsConfigRead::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIElementsConfigRead::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIElementsConfigRead::getProjectId() const {
    return project_id;
}
void OAIElementsConfigRead::setProjectId(const QString &project_id) {
    this->project_id = project_id;
    this->m_project_id_isSet = true;
}

bool OAIElementsConfigRead::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIElementsConfigRead::is_project_id_Valid() const{
    return m_project_id_isValid;
}

QString OAIElementsConfigRead::getEnvironmentId() const {
    return environment_id;
}
void OAIElementsConfigRead::setEnvironmentId(const QString &environment_id) {
    this->environment_id = environment_id;
    this->m_environment_id_isSet = true;
}

bool OAIElementsConfigRead::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIElementsConfigRead::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

QDateTime OAIElementsConfigRead::getCreatedAt() const {
    return created_at;
}
void OAIElementsConfigRead::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIElementsConfigRead::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIElementsConfigRead::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIElementsConfigRead::getUpdatedAt() const {
    return updated_at;
}
void OAIElementsConfigRead::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool OAIElementsConfigRead::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIElementsConfigRead::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIElementsConfigRead::isIsActive() const {
    return is_active;
}
void OAIElementsConfigRead::setIsActive(const bool &is_active) {
    this->is_active = is_active;
    this->m_is_active_isSet = true;
}

bool OAIElementsConfigRead::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAIElementsConfigRead::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAIElementsConfigRead::getName() const {
    return name;
}
void OAIElementsConfigRead::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIElementsConfigRead::is_name_Set() const{
    return m_name_isSet;
}

bool OAIElementsConfigRead::is_name_Valid() const{
    return m_name_isValid;
}

OAIElementsType OAIElementsConfigRead::getElementsType() const {
    return elements_type;
}
void OAIElementsConfigRead::setElementsType(const OAIElementsType &elements_type) {
    this->elements_type = elements_type;
    this->m_elements_type_isSet = true;
}

bool OAIElementsConfigRead::is_elements_type_Set() const{
    return m_elements_type_isSet;
}

bool OAIElementsConfigRead::is_elements_type_Valid() const{
    return m_elements_type_isValid;
}

QMap<QString, OAISettings> OAIElementsConfigRead::getSettings() const {
    return settings;
}
void OAIElementsConfigRead::setSettings(const QMap<QString, OAISettings> &settings) {
    this->settings = settings;
    this->m_settings_isSet = true;
}

bool OAIElementsConfigRead::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIElementsConfigRead::is_settings_Valid() const{
    return m_settings_isValid;
}

QMap<QString, QList<OAIPermissionLevelRoleRead>> OAIElementsConfigRead::getRolesToLevels() const {
    return roles_to_levels;
}
void OAIElementsConfigRead::setRolesToLevels(const QMap<QString, QList<OAIPermissionLevelRoleRead>> &roles_to_levels) {
    this->roles_to_levels = roles_to_levels;
    this->m_roles_to_levels_isSet = true;
}

bool OAIElementsConfigRead::is_roles_to_levels_Set() const{
    return m_roles_to_levels_isSet;
}

bool OAIElementsConfigRead::is_roles_to_levels_Valid() const{
    return m_roles_to_levels_isValid;
}

OAIWebhookRead OAIElementsConfigRead::getWebhook() const {
    return webhook;
}
void OAIElementsConfigRead::setWebhook(const OAIWebhookRead &webhook) {
    this->webhook = webhook;
    this->m_webhook_isSet = true;
}

bool OAIElementsConfigRead::is_webhook_Set() const{
    return m_webhook_isSet;
}

bool OAIElementsConfigRead::is_webhook_Valid() const{
    return m_webhook_isValid;
}

bool OAIElementsConfigRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (elements_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (settings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (roles_to_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (webhook.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElementsConfigRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_id_isValid && m_organization_id_isValid && m_project_id_isValid && m_environment_id_isValid && m_created_at_isValid && m_updated_at_isValid && m_is_active_isValid && m_name_isValid && m_elements_type_isValid && m_settings_isValid && m_roles_to_levels_isValid && true;
}

} // namespace OpenAPI
