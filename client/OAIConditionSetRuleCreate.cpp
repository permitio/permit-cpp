/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditionSetRuleCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditionSetRuleCreate::OAIConditionSetRuleCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditionSetRuleCreate::OAIConditionSetRuleCreate() {
    this->initializeModel();
}

OAIConditionSetRuleCreate::~OAIConditionSetRuleCreate() {}

void OAIConditionSetRuleCreate::initializeModel() {

    m_user_set_isSet = false;
    m_user_set_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_resource_set_isSet = false;
    m_resource_set_isValid = false;

    m_is_role_isSet = false;
    m_is_role_isValid = false;

    m_is_resource_isSet = false;
    m_is_resource_isValid = false;
}

void OAIConditionSetRuleCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditionSetRuleCreate::fromJsonObject(QJsonObject json) {

    m_user_set_isValid = ::OpenAPI::fromJsonValue(user_set, json[QString("user_set")]);
    m_user_set_isSet = !json[QString("user_set")].isNull() && m_user_set_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_resource_set_isValid = ::OpenAPI::fromJsonValue(resource_set, json[QString("resource_set")]);
    m_resource_set_isSet = !json[QString("resource_set")].isNull() && m_resource_set_isValid;

    m_is_role_isValid = ::OpenAPI::fromJsonValue(is_role, json[QString("is_role")]);
    m_is_role_isSet = !json[QString("is_role")].isNull() && m_is_role_isValid;

    m_is_resource_isValid = ::OpenAPI::fromJsonValue(is_resource, json[QString("is_resource")]);
    m_is_resource_isSet = !json[QString("is_resource")].isNull() && m_is_resource_isValid;
}

QString OAIConditionSetRuleCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditionSetRuleCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_user_set_isSet) {
        obj.insert(QString("user_set"), ::OpenAPI::toJsonValue(user_set));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(permission));
    }
    if (m_resource_set_isSet) {
        obj.insert(QString("resource_set"), ::OpenAPI::toJsonValue(resource_set));
    }
    if (m_is_role_isSet) {
        obj.insert(QString("is_role"), ::OpenAPI::toJsonValue(is_role));
    }
    if (m_is_resource_isSet) {
        obj.insert(QString("is_resource"), ::OpenAPI::toJsonValue(is_resource));
    }
    return obj;
}

QString OAIConditionSetRuleCreate::getUserSet() const {
    return user_set;
}
void OAIConditionSetRuleCreate::setUserSet(const QString &user_set) {
    this->user_set = user_set;
    this->m_user_set_isSet = true;
}

bool OAIConditionSetRuleCreate::is_user_set_Set() const{
    return m_user_set_isSet;
}

bool OAIConditionSetRuleCreate::is_user_set_Valid() const{
    return m_user_set_isValid;
}

QString OAIConditionSetRuleCreate::getPermission() const {
    return permission;
}
void OAIConditionSetRuleCreate::setPermission(const QString &permission) {
    this->permission = permission;
    this->m_permission_isSet = true;
}

bool OAIConditionSetRuleCreate::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIConditionSetRuleCreate::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAIConditionSetRuleCreate::getResourceSet() const {
    return resource_set;
}
void OAIConditionSetRuleCreate::setResourceSet(const QString &resource_set) {
    this->resource_set = resource_set;
    this->m_resource_set_isSet = true;
}

bool OAIConditionSetRuleCreate::is_resource_set_Set() const{
    return m_resource_set_isSet;
}

bool OAIConditionSetRuleCreate::is_resource_set_Valid() const{
    return m_resource_set_isValid;
}

bool OAIConditionSetRuleCreate::isIsRole() const {
    return is_role;
}
void OAIConditionSetRuleCreate::setIsRole(const bool &is_role) {
    this->is_role = is_role;
    this->m_is_role_isSet = true;
}

bool OAIConditionSetRuleCreate::is_is_role_Set() const{
    return m_is_role_isSet;
}

bool OAIConditionSetRuleCreate::is_is_role_Valid() const{
    return m_is_role_isValid;
}

bool OAIConditionSetRuleCreate::isIsResource() const {
    return is_resource;
}
void OAIConditionSetRuleCreate::setIsResource(const bool &is_resource) {
    this->is_resource = is_resource;
    this->m_is_resource_isSet = true;
}

bool OAIConditionSetRuleCreate::is_is_resource_Set() const{
    return m_is_resource_isSet;
}

bool OAIConditionSetRuleCreate::is_is_resource_Valid() const{
    return m_is_resource_isValid;
}

bool OAIConditionSetRuleCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditionSetRuleCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_set_isValid && m_permission_isValid && m_resource_set_isValid && true;
}

} // namespace OpenAPI
