/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoginResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoginResult::OAILoginResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoginResult::OAILoginResult() {
    this->initializeModel();
}

OAILoginResult::~OAILoginResult() {}

void OAILoginResult::initializeModel() {

    m_logged_in_isSet = false;
    m_logged_in_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_active_org_id_isSet = false;
    m_active_org_id_isValid = false;

    m_invite_attempt_isSet = false;
    m_invite_attempt_isValid = false;
}

void OAILoginResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoginResult::fromJsonObject(QJsonObject json) {

    m_logged_in_isValid = ::OpenAPI::fromJsonValue(logged_in, json[QString("logged_in")]);
    m_logged_in_isSet = !json[QString("logged_in")].isNull() && m_logged_in_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(expires_at, json[QString("expires_at")]);
    m_expires_at_isSet = !json[QString("expires_at")].isNull() && m_expires_at_isValid;

    m_active_org_id_isValid = ::OpenAPI::fromJsonValue(active_org_id, json[QString("active_org_id")]);
    m_active_org_id_isSet = !json[QString("active_org_id")].isNull() && m_active_org_id_isValid;

    m_invite_attempt_isValid = ::OpenAPI::fromJsonValue(invite_attempt, json[QString("invite_attempt")]);
    m_invite_attempt_isSet = !json[QString("invite_attempt")].isNull() && m_invite_attempt_isValid;
}

QString OAILoginResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoginResult::asJsonObject() const {
    QJsonObject obj;
    if (m_logged_in_isSet) {
        obj.insert(QString("logged_in"), ::OpenAPI::toJsonValue(logged_in));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expires_at"), ::OpenAPI::toJsonValue(expires_at));
    }
    if (m_active_org_id_isSet) {
        obj.insert(QString("active_org_id"), ::OpenAPI::toJsonValue(active_org_id));
    }
    if (invite_attempt.isSet()) {
        obj.insert(QString("invite_attempt"), ::OpenAPI::toJsonValue(invite_attempt));
    }
    return obj;
}

bool OAILoginResult::isLoggedIn() const {
    return logged_in;
}
void OAILoginResult::setLoggedIn(const bool &logged_in) {
    this->logged_in = logged_in;
    this->m_logged_in_isSet = true;
}

bool OAILoginResult::is_logged_in_Set() const{
    return m_logged_in_isSet;
}

bool OAILoginResult::is_logged_in_Valid() const{
    return m_logged_in_isValid;
}

qint32 OAILoginResult::getExpiresAt() const {
    return expires_at;
}
void OAILoginResult::setExpiresAt(const qint32 &expires_at) {
    this->expires_at = expires_at;
    this->m_expires_at_isSet = true;
}

bool OAILoginResult::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAILoginResult::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAILoginResult::getActiveOrgId() const {
    return active_org_id;
}
void OAILoginResult::setActiveOrgId(const QString &active_org_id) {
    this->active_org_id = active_org_id;
    this->m_active_org_id_isSet = true;
}

bool OAILoginResult::is_active_org_id_Set() const{
    return m_active_org_id_isSet;
}

bool OAILoginResult::is_active_org_id_Valid() const{
    return m_active_org_id_isValid;
}

OAIInviteAttemptResult OAILoginResult::getInviteAttempt() const {
    return invite_attempt;
}
void OAILoginResult::setInviteAttempt(const OAIInviteAttemptResult &invite_attempt) {
    this->invite_attempt = invite_attempt;
    this->m_invite_attempt_isSet = true;
}

bool OAILoginResult::is_invite_attempt_Set() const{
    return m_invite_attempt_isSet;
}

bool OAILoginResult::is_invite_attempt_Valid() const{
    return m_invite_attempt_isValid;
}

bool OAILoginResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logged_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_org_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (invite_attempt.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoginResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_logged_in_isValid && m_expires_at_isValid && true;
}

} // namespace OpenAPI
