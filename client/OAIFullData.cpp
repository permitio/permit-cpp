/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFullData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFullData::OAIFullData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFullData::OAIFullData() {
    this->initializeModel();
}

OAIFullData::~OAIFullData() {}

void OAIFullData::initializeModel() {

    m_users_isSet = false;
    m_users_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_condition_set_rules_isSet = false;
    m_condition_set_rules_isValid = false;
}

void OAIFullData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFullData::fromJsonObject(QJsonObject json) {

    m_users_isValid = ::OpenAPI::fromJsonValue(users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    if(json["condition_set_rules"].isObject()){
        auto varmap = json["condition_set_rules"].toObject().toVariantMap();
        m_condition_set_rules_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QMap> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_condition_set_rules_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_condition_set_rules_isSet &= !jval.isNull() && m_condition_set_rules_isValid;
                condition_set_rules.insert(condition_set_rules.end(), val, item);
            }
        }
    }
}

QString OAIFullData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFullData::asJsonObject() const {
    QJsonObject obj;
    if (users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(users));
    }
    if (roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(roles));
    }
    if (condition_set_rules.size() > 0) {
        
        obj.insert(QString("condition_set_rules"), toJsonValue(condition_set_rules));
    }
    return obj;
}

QMap<QString, OAIUserData> OAIFullData::getUsers() const {
    return users;
}
void OAIFullData::setUsers(const QMap<QString, OAIUserData> &users) {
    this->users = users;
    this->m_users_isSet = true;
}

bool OAIFullData::is_users_Set() const{
    return m_users_isSet;
}

bool OAIFullData::is_users_Valid() const{
    return m_users_isValid;
}

QMap<QString, OAIRoleData> OAIFullData::getRoles() const {
    return roles;
}
void OAIFullData::setRoles(const QMap<QString, OAIRoleData> &roles) {
    this->roles = roles;
    this->m_roles_isSet = true;
}

bool OAIFullData::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIFullData::is_roles_Valid() const{
    return m_roles_isValid;
}

QMap<QString, QMap<QString, QMap<QString, QList<QString>>>> OAIFullData::getConditionSetRules() const {
    return condition_set_rules;
}
void OAIFullData::setConditionSetRules(const QMap<QString, QMap<QString, QMap<QString, QList<QString>>>> &condition_set_rules) {
    this->condition_set_rules = condition_set_rules;
    this->m_condition_set_rules_isSet = true;
}

bool OAIFullData::is_condition_set_rules_Set() const{
    return m_condition_set_rules_isSet;
}

bool OAIFullData::is_condition_set_rules_Valid() const{
    return m_condition_set_rules_isValid;
}

bool OAIFullData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (condition_set_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFullData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_users_isValid && m_roles_isValid && m_condition_set_rules_isValid && true;
}

} // namespace OpenAPI
