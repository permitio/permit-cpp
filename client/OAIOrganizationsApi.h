/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrganizationsApi_H
#define OAI_OAIOrganizationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAIInviteCreate.h"
#include "OAIInviteRead.h"
#include "OAIMultiInviteResult.h"
#include "OAIOrganizationCreate.h"
#include "OAIOrganizationRead.h"
#include "OAIOrganizationReadWithAPIKey.h"
#include "OAIOrganizationUpdate.h"
#include <QList>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrganizationsApi : public QObject {
    Q_OBJECT

public:
    OAIOrganizationsApi(const int timeOut = 0);
    ~OAIOrganizationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  invite_id QString [required]
    */
    void cancelInvite(const QString &org_id, const QString &invite_id);

    /**
    * @param[in]  oai_organization_create OAIOrganizationCreate [required]
    */
    void createOrganization(const OAIOrganizationCreate &oai_organization_create);

    /**
    * @param[in]  org_id QString [required]
    */
    void deleteOrganization(const QString &org_id);


    void getActiveOrganization();

    /**
    * @param[in]  org_id QString [required]
    */
    void getOrganization(const QString &org_id);

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  oai_invite_create QList<OAIInviteCreate> [required]
    * @param[in]  inviter_name QString [optional]
    * @param[in]  inviter_email QString [optional]
    */
    void inviteMembersToOrganization(const QString &org_id, const QList<OAIInviteCreate> &oai_invite_create, const ::OpenAPI::OptionalParam<QString> &inviter_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &inviter_email = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listOrganizationInvites(const QString &org_id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    void listOrganizations(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  org_id QString [required]
    * @param[in]  oai_organization_update OAIOrganizationUpdate [required]
    */
    void updateOrganization(const QString &org_id, const OAIOrganizationUpdate &oai_organization_update);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelInviteCallback(OAIHttpRequestWorker *worker);
    void createOrganizationCallback(OAIHttpRequestWorker *worker);
    void deleteOrganizationCallback(OAIHttpRequestWorker *worker);
    void getActiveOrganizationCallback(OAIHttpRequestWorker *worker);
    void getOrganizationCallback(OAIHttpRequestWorker *worker);
    void inviteMembersToOrganizationCallback(OAIHttpRequestWorker *worker);
    void listOrganizationInvitesCallback(OAIHttpRequestWorker *worker);
    void listOrganizationsCallback(OAIHttpRequestWorker *worker);
    void updateOrganizationCallback(OAIHttpRequestWorker *worker);

signals:

    void cancelInviteSignal();
    void createOrganizationSignal(OAIOrganizationReadWithAPIKey summary);
    void deleteOrganizationSignal();
    void getActiveOrganizationSignal(OAIOrganizationRead summary);
    void getOrganizationSignal(OAIOrganizationRead summary);
    void inviteMembersToOrganizationSignal(OAIMultiInviteResult summary);
    void listOrganizationInvitesSignal(QList<OAIInviteRead> summary);
    void listOrganizationsSignal(QList<OAIOrganizationRead> summary);
    void updateOrganizationSignal(OAIOrganizationRead summary);

    void cancelInviteSignalFull(OAIHttpRequestWorker *worker);
    void createOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationReadWithAPIKey summary);
    void deleteOrganizationSignalFull(OAIHttpRequestWorker *worker);
    void getActiveOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationRead summary);
    void getOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationRead summary);
    void inviteMembersToOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIMultiInviteResult summary);
    void listOrganizationInvitesSignalFull(OAIHttpRequestWorker *worker, QList<OAIInviteRead> summary);
    void listOrganizationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizationRead> summary);
    void updateOrganizationSignalFull(OAIHttpRequestWorker *worker, OAIOrganizationRead summary);

    void cancelInviteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSignalE(OAIOrganizationReadWithAPIKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveOrganizationSignalE(OAIOrganizationRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSignalE(OAIOrganizationRead summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteMembersToOrganizationSignalE(OAIMultiInviteResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationInvitesSignalE(QList<OAIInviteRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationsSignalE(QList<OAIOrganizationRead> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSignalE(OAIOrganizationRead summary, QNetworkReply::NetworkError error_type, QString error_str);

    void cancelInviteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActiveOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteMembersToOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationInvitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listOrganizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
