/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiInviteResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiInviteResult::OAIMultiInviteResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiInviteResult::OAIMultiInviteResult() {
    this->initializeModel();
}

OAIMultiInviteResult::~OAIMultiInviteResult() {}

void OAIMultiInviteResult::initializeModel() {

    m_success_isSet = false;
    m_success_isValid = false;

    m_failed_isSet = false;
    m_failed_isValid = false;
}

void OAIMultiInviteResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiInviteResult::fromJsonObject(QJsonObject json) {

    m_success_isValid = ::OpenAPI::fromJsonValue(success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_failed_isValid = ::OpenAPI::fromJsonValue(failed, json[QString("failed")]);
    m_failed_isSet = !json[QString("failed")].isNull() && m_failed_isValid;
}

QString OAIMultiInviteResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiInviteResult::asJsonObject() const {
    QJsonObject obj;
    if (success.size() > 0) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(success));
    }
    if (failed.size() > 0) {
        obj.insert(QString("failed"), ::OpenAPI::toJsonValue(failed));
    }
    return obj;
}

QList<OAIInviteRead> OAIMultiInviteResult::getSuccess() const {
    return success;
}
void OAIMultiInviteResult::setSuccess(const QList<OAIInviteRead> &success) {
    this->success = success;
    this->m_success_isSet = true;
}

bool OAIMultiInviteResult::is_success_Set() const{
    return m_success_isSet;
}

bool OAIMultiInviteResult::is_success_Valid() const{
    return m_success_isValid;
}

QList<OAIFailedInvite> OAIMultiInviteResult::getFailed() const {
    return failed;
}
void OAIMultiInviteResult::setFailed(const QList<OAIFailedInvite> &failed) {
    this->failed = failed;
    this->m_failed_isSet = true;
}

bool OAIMultiInviteResult::is_failed_Set() const{
    return m_failed_isSet;
}

bool OAIMultiInviteResult::is_failed_Valid() const{
    return m_failed_isValid;
}

bool OAIMultiInviteResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (success.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (failed.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiInviteResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_success_isValid && true;
}

} // namespace OpenAPI
