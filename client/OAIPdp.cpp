/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPdp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPdp::OAIPdp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPdp::OAIPdp() {
    this->initializeModel();
}

OAIPdp::~OAIPdp() {}

void OAIPdp::initializeModel() {

    m_backend_service_url_isSet = false;
    m_backend_service_url_isValid = false;

    m_opa_decision_log_ingress_route_isSet = false;
    m_opa_decision_log_ingress_route_isValid = false;

    m_opa_decision_log_ingress_backend_tier_url_isSet = false;
    m_opa_decision_log_ingress_backend_tier_url_isValid = false;
}

void OAIPdp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPdp::fromJsonObject(QJsonObject json) {

    m_backend_service_url_isValid = ::OpenAPI::fromJsonValue(backend_service_url, json[QString("BACKEND_SERVICE_URL")]);
    m_backend_service_url_isSet = !json[QString("BACKEND_SERVICE_URL")].isNull() && m_backend_service_url_isValid;

    m_opa_decision_log_ingress_route_isValid = ::OpenAPI::fromJsonValue(opa_decision_log_ingress_route, json[QString("OPA_DECISION_LOG_INGRESS_ROUTE")]);
    m_opa_decision_log_ingress_route_isSet = !json[QString("OPA_DECISION_LOG_INGRESS_ROUTE")].isNull() && m_opa_decision_log_ingress_route_isValid;

    m_opa_decision_log_ingress_backend_tier_url_isValid = ::OpenAPI::fromJsonValue(opa_decision_log_ingress_backend_tier_url, json[QString("OPA_DECISION_LOG_INGRESS_BACKEND_TIER_URL")]);
    m_opa_decision_log_ingress_backend_tier_url_isSet = !json[QString("OPA_DECISION_LOG_INGRESS_BACKEND_TIER_URL")].isNull() && m_opa_decision_log_ingress_backend_tier_url_isValid;
}

QString OAIPdp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPdp::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_service_url_isSet) {
        obj.insert(QString("BACKEND_SERVICE_URL"), ::OpenAPI::toJsonValue(backend_service_url));
    }
    if (m_opa_decision_log_ingress_route_isSet) {
        obj.insert(QString("OPA_DECISION_LOG_INGRESS_ROUTE"), ::OpenAPI::toJsonValue(opa_decision_log_ingress_route));
    }
    if (m_opa_decision_log_ingress_backend_tier_url_isSet) {
        obj.insert(QString("OPA_DECISION_LOG_INGRESS_BACKEND_TIER_URL"), ::OpenAPI::toJsonValue(opa_decision_log_ingress_backend_tier_url));
    }
    return obj;
}

QString OAIPdp::getBackendServiceUrl() const {
    return backend_service_url;
}
void OAIPdp::setBackendServiceUrl(const QString &backend_service_url) {
    this->backend_service_url = backend_service_url;
    this->m_backend_service_url_isSet = true;
}

bool OAIPdp::is_backend_service_url_Set() const{
    return m_backend_service_url_isSet;
}

bool OAIPdp::is_backend_service_url_Valid() const{
    return m_backend_service_url_isValid;
}

QString OAIPdp::getOpaDecisionLogIngressRoute() const {
    return opa_decision_log_ingress_route;
}
void OAIPdp::setOpaDecisionLogIngressRoute(const QString &opa_decision_log_ingress_route) {
    this->opa_decision_log_ingress_route = opa_decision_log_ingress_route;
    this->m_opa_decision_log_ingress_route_isSet = true;
}

bool OAIPdp::is_opa_decision_log_ingress_route_Set() const{
    return m_opa_decision_log_ingress_route_isSet;
}

bool OAIPdp::is_opa_decision_log_ingress_route_Valid() const{
    return m_opa_decision_log_ingress_route_isValid;
}

QString OAIPdp::getOpaDecisionLogIngressBackendTierUrl() const {
    return opa_decision_log_ingress_backend_tier_url;
}
void OAIPdp::setOpaDecisionLogIngressBackendTierUrl(const QString &opa_decision_log_ingress_backend_tier_url) {
    this->opa_decision_log_ingress_backend_tier_url = opa_decision_log_ingress_backend_tier_url;
    this->m_opa_decision_log_ingress_backend_tier_url_isSet = true;
}

bool OAIPdp::is_opa_decision_log_ingress_backend_tier_url_Set() const{
    return m_opa_decision_log_ingress_backend_tier_url_isSet;
}

bool OAIPdp::is_opa_decision_log_ingress_backend_tier_url_Valid() const{
    return m_opa_decision_log_ingress_backend_tier_url_isValid;
}

bool OAIPdp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opa_decision_log_ingress_route_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opa_decision_log_ingress_backend_tier_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPdp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_backend_service_url_isValid && m_opa_decision_log_ingress_route_isValid && m_opa_decision_log_ingress_backend_tier_url_isValid && true;
}

} // namespace OpenAPI
