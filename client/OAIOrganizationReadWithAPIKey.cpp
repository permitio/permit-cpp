/**
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizationReadWithAPIKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizationReadWithAPIKey::OAIOrganizationReadWithAPIKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizationReadWithAPIKey::OAIOrganizationReadWithAPIKey() {
    this->initializeModel();
}

OAIOrganizationReadWithAPIKey::~OAIOrganizationReadWithAPIKey() {}

void OAIOrganizationReadWithAPIKey::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_api_key_id_isSet = false;
    m_api_key_id_isValid = false;

    m_api_key_secret_isSet = false;
    m_api_key_secret_isValid = false;
}

void OAIOrganizationReadWithAPIKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizationReadWithAPIKey::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_api_key_id_isValid = ::OpenAPI::fromJsonValue(api_key_id, json[QString("api_key_id")]);
    m_api_key_id_isSet = !json[QString("api_key_id")].isNull() && m_api_key_id_isValid;

    m_api_key_secret_isValid = ::OpenAPI::fromJsonValue(api_key_secret, json[QString("api_key_secret")]);
    m_api_key_secret_isSet = !json[QString("api_key_secret")].isNull() && m_api_key_secret_isValid;
}

QString OAIOrganizationReadWithAPIKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizationReadWithAPIKey::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(key));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(updated_at));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(name));
    }
    if (m_settings_isSet) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(settings));
    }
    if (m_api_key_id_isSet) {
        obj.insert(QString("api_key_id"), ::OpenAPI::toJsonValue(api_key_id));
    }
    if (m_api_key_secret_isSet) {
        obj.insert(QString("api_key_secret"), ::OpenAPI::toJsonValue(api_key_secret));
    }
    return obj;
}

QString OAIOrganizationReadWithAPIKey::getKey() const {
    return key;
}
void OAIOrganizationReadWithAPIKey::setKey(const QString &key) {
    this->key = key;
    this->m_key_isSet = true;
}

bool OAIOrganizationReadWithAPIKey::is_key_Set() const{
    return m_key_isSet;
}

bool OAIOrganizationReadWithAPIKey::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIOrganizationReadWithAPIKey::getId() const {
    return id;
}
void OAIOrganizationReadWithAPIKey::setId(const QString &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAIOrganizationReadWithAPIKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrganizationReadWithAPIKey::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIOrganizationReadWithAPIKey::getCreatedAt() const {
    return created_at;
}
void OAIOrganizationReadWithAPIKey::setCreatedAt(const QDateTime &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAIOrganizationReadWithAPIKey::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrganizationReadWithAPIKey::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIOrganizationReadWithAPIKey::getUpdatedAt() const {
    return updated_at;
}
void OAIOrganizationReadWithAPIKey::setUpdatedAt(const QDateTime &updated_at) {
    this->updated_at = updated_at;
    this->m_updated_at_isSet = true;
}

bool OAIOrganizationReadWithAPIKey::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOrganizationReadWithAPIKey::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIOrganizationReadWithAPIKey::getName() const {
    return name;
}
void OAIOrganizationReadWithAPIKey::setName(const QString &name) {
    this->name = name;
    this->m_name_isSet = true;
}

bool OAIOrganizationReadWithAPIKey::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganizationReadWithAPIKey::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIOrganizationReadWithAPIKey::getSettings() const {
    return settings;
}
void OAIOrganizationReadWithAPIKey::setSettings(const OAIObject &settings) {
    this->settings = settings;
    this->m_settings_isSet = true;
}

bool OAIOrganizationReadWithAPIKey::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIOrganizationReadWithAPIKey::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIOrganizationReadWithAPIKey::getApiKeyId() const {
    return api_key_id;
}
void OAIOrganizationReadWithAPIKey::setApiKeyId(const QString &api_key_id) {
    this->api_key_id = api_key_id;
    this->m_api_key_id_isSet = true;
}

bool OAIOrganizationReadWithAPIKey::is_api_key_id_Set() const{
    return m_api_key_id_isSet;
}

bool OAIOrganizationReadWithAPIKey::is_api_key_id_Valid() const{
    return m_api_key_id_isValid;
}

QString OAIOrganizationReadWithAPIKey::getApiKeySecret() const {
    return api_key_secret;
}
void OAIOrganizationReadWithAPIKey::setApiKeySecret(const QString &api_key_secret) {
    this->api_key_secret = api_key_secret;
    this->m_api_key_secret_isSet = true;
}

bool OAIOrganizationReadWithAPIKey::is_api_key_secret_Set() const{
    return m_api_key_secret_isSet;
}

bool OAIOrganizationReadWithAPIKey::is_api_key_secret_Valid() const{
    return m_api_key_secret_isValid;
}

bool OAIOrganizationReadWithAPIKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizationReadWithAPIKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_isValid && m_id_isValid && m_created_at_isValid && m_updated_at_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
